{
  "org.springframework.test.context.bean.override.mockito.<unknown>#createHandlers(overrideAnnotation,testClass)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "overrideAnnotation",
      "testClass"
    ],
    "position": {
      "column": 1,
      "line": 58
    },
    "return": "List<BeanOverrideHandler>",
    "signature": "public List<BeanOverrideHandler> createHandlers(Annotation overrideAnnotation, Class<?> testClass)",
    "source_code": "\tpublic List<BeanOverrideHandler> createHandlers(Annotation overrideAnnotation, Class<?> testClass) {\n\t\tif (!(overrideAnnotation instanceof MockitoBean mockitoBean)) {\n\t\t\tthrow new IllegalStateException(\"\"\"\n\t\t\t\t\tInvalid annotation passed to MockitoBeanOverrideProcessor: \\\n\t\t\t\t\texpected @MockitoBean on test class \"\"\" + testClass.getName());\n\t\t}\n\t\tClass<?>[] types = mockitoBean.types();\n\t\tAssert.state(types.length > 0,\n\t\t\t\t\"The @MockitoBean 'types' attribute must not be empty when declared on a class\");\n\t\tAssert.state(mockitoBean.name().isEmpty() || types.length == 1,\n\t\t\t\t\"The @MockitoBean 'name' attribute cannot be used when mocking multiple types\");\n\t\tList<BeanOverrideHandler> handlers = new ArrayList<>();\n\t\tfor (Class<?> type : types) {\n\t\t\thandlers.add(new MockitoBeanOverrideHandler(ResolvableType.forClass(type), mockitoBean));\n\t\t}\n\t\treturn handlers;\n\t}"
  },
  "org.springframework.util.<unknown>#entrySet()": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 155
    },
    "return": "List<V>>>",
    "signature": "public List<V>>> entrySet()",
    "source_code": "\tpublic Set<Entry<K, List<V>>> entrySet() {\n\t\tif (this.entrySet == null) {\n\t\t\tthis.entrySet = new UnmodifiableEntrySet<>(this.delegate.entrySet());\n\t\t}\n\t\treturn this.entrySet;\n\t}"
  },
  "org.springframework.util.<unknown>#get(key)": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "key"
    ],
    "position": {
      "column": 1,
      "line": 93
    },
    "return": "List<V>",
    "signature": "public List<V> get(Object key)",
    "source_code": "\tpublic List<V> get(Object key) {\n\t\tList<V> result = this.delegate.get(key);\n\t\treturn (result != null ? Collections.unmodifiableList(result) : null);\n\t}"
  },
  "org.springframework.util.<unknown>#iterator()": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 573
    },
    "return": "Iterator<List<V>>",
    "signature": "public Iterator<List<V>> iterator()",
    "source_code": "\t\tpublic Iterator<List<V>> iterator() {\n\t\t\tIterator<List<V>> iterator = this.delegate.iterator();\n\t\t\treturn new Iterator<>() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean hasNext() {\n\t\t\t\t\treturn iterator.hasNext();\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic List<V> next() {\n\t\t\t\t\treturn Collections.unmodifiableList(iterator.next());\n\t\t\t\t}\n\t\t\t};\n\t\t}"
  },
  "org.springframework.util.<unknown>#next()": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 582
    },
    "return": "List<V>",
    "signature": "public List<V> next()",
    "source_code": "\t\t\t\tpublic List<V> next() {\n\t\t\t\t\treturn Collections.unmodifiableList(iterator.next());\n\t\t\t\t}"
  },
  "org.springframework.util.<unknown>#put(key,value)": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "key",
      "value"
    ],
    "position": {
      "column": 1,
      "line": 174
    },
    "return": "List<V>",
    "signature": "public List<V> put(K key, List<V> value)",
    "source_code": "\tpublic List<V> put(K key, List<V> value) {\n\t\tthrow new UnsupportedOperationException();\n\t}"
  },
  "org.springframework.util.<unknown>#remove(key)": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "key"
    ],
    "position": {
      "column": 1,
      "line": 189
    },
    "return": "List<V>",
    "signature": "public List<V> remove(Object key)",
    "source_code": "\tpublic List<V> remove(Object key) {\n\t\tthrow new UnsupportedOperationException();\n\t}"
  },
  "org.springframework.util.<unknown>#values()": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 163
    },
    "return": "Collection<List<V>>",
    "signature": "public Collection<List<V>> values()",
    "source_code": "\tpublic Collection<List<V>> values() {\n\t\tif (this.values == null) {\n\t\t\tthis.values = new UnmodifiableValueCollection<>(this.delegate.values());\n\t\t}\n\t\treturn this.values;\n\t}"
  },
  "org.springframework.web.client.DefaultResponseErrorHandler": {
    "change": "added",
    "deprecated": false,
    "doc": "/**\n * Spring's default implementation of the {@link ResponseErrorHandler} interface.\n *\n * <p>This error handler checks for the status code on the\n * {@link ClientHttpResponse}. Any code in the 4xx or 5xx series is considered\n * to be an error. This behavior can be changed by overriding\n * {@link #hasError(HttpStatusCode)}. Unknown status codes will be ignored by\n * {@link #hasError(ClientHttpResponse)}.\n *\n * <p>See {@link #handleError(URI, HttpMethod, ClientHttpResponse)}  for more\n * details on specific exception types.\n *\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n * @author Juergen Hoeller\n * @since 3.0\n * @see RestTemplate#setErrorHandler\n */",
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 61
    },
    "signature": "public class DefaultResponseErrorHandler",
    "source_code": "public class DefaultResponseErrorHandler implements ResponseErrorHandler {\n\n\t@Nullable\n\tprivate List<HttpMessageConverter<?>> messageConverters;\n\n\n\t/**\n\t * For internal use from the RestTemplate, to pass the message converters\n\t * to use to decode error content.\n\t * @since 6.0\n\t */\n\tvoid setMessageConverters(List<HttpMessageConverter<?>> converters) {\n\t\tthis.messageConverters = Collections.unmodifiableList(converters);\n\t}\n\n\n\t/**\n\t * Delegates to {@link #hasError(HttpStatusCode)} with the response status code.\n\t * @see ClientHttpResponse#getStatusCode()\n\t * @see #hasError(HttpStatusCode)\n\t */\n\t@Override\n\tpublic boolean hasError(ClientHttpResponse response) throws IOException {\n\t\tHttpStatusCode statusCode = response.getStatusCode();\n\t\treturn hasError(statusCode);\n\t}\n\n\t/**\n\t * Template method called from {@link #hasError(ClientHttpResponse)}.\n\t * <p>The default implementation checks {@link HttpStatusCode#isError()}.\n\t * Can be overridden in subclasses.\n\t * @param statusCode the HTTP status code\n\t * @return {@code true} if the response indicates an error; {@code false} otherwise\n\t * @see HttpStatusCode#isError()\n\t */\n\tprotected boolean hasError(HttpStatusCode statusCode) {\n\t\treturn statusCode.isError();\n\t}\n\n\t/**\n\t * Template method called from {@link #hasError(ClientHttpResponse)}.\n\t * <p>The default implementation checks if the given status code is\n\t * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR CLIENT_ERROR} or\n\t * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR SERVER_ERROR}.\n\t * Can be overridden in subclasses.\n\t * @param statusCode the HTTP status code as raw value\n\t * @return {@code true} if the response indicates an error; {@code false} otherwise\n\t * @since 4.3.21\n\t * @see org.springframework.http.HttpStatus.Series#CLIENT_ERROR\n\t * @see org.springframework.http.HttpStatus.Series#SERVER_ERROR\n\t * @deprecated in favor of {@link #hasError(HttpStatusCode)}\n\t */\n\t@Deprecated\n\tprotected boolean hasError(int statusCode) {\n\t\tHttpStatus.Series series = HttpStatus.Series.resolve(statusCode);\n\t\treturn (series == HttpStatus.Series.CLIENT_ERROR || series == HttpStatus.Series.SERVER_ERROR);\n\t}\n\n\t/**\n\t * Handle the error in the given response with the given resolved status code\n\t * and extra information providing access to the request URL and HTTP method.\n\t * <p>The default implementation throws:\n\t * <ul>\n\t * <li>{@link HttpClientErrorException} if the status code is in the 4xx\n\t * series, or one of its sub-classes such as\n\t * {@link HttpClientErrorException.BadRequest} and others.\n\t * <li>{@link HttpServerErrorException} if the status code is in the 5xx\n\t * series, or one of its sub-classes such as\n\t * {@link HttpServerErrorException.InternalServerError} and others.\n\t * <li>{@link UnknownHttpStatusCodeException} for error status codes not in the\n\t * {@link HttpStatus} enum range.\n\t * </ul>\n\t * @throws UnknownHttpStatusCodeException in case of an unresolvable status code\n\t * @since 6.2\n\t * @see #handleError(ClientHttpResponse, HttpStatusCode, URI, HttpMethod)\n\t */\n\t@Override\n\tpublic void handleError(URI url, HttpMethod method, ClientHttpResponse response) throws IOException {\n\n\t\t// For backwards compatibility try handle(response) first\n\t\tHandleErrorResponseDecorator decorator = new HandleErrorResponseDecorator(response);\n\t\thandleError(decorator);\n\t\tif (decorator.isHandled()) {\n\t\t\treturn;\n\t\t}\n\n\t\thandleError(response, response.getStatusCode(), url, method);\n\t}\n\n\t@SuppressWarnings(\"removal\")\n\t@Override\n\tpublic void handleError(ClientHttpResponse response) throws IOException {\n\n\t\t// Called via handleError(url, method, response)\n\t\tif (response instanceof HandleErrorResponseDecorator decorator) {\n\t\t\tdecorator.setNotHandled();\n\t\t\treturn;\n\t\t}\n\n\t\t// Called directly, so do handle\n\t\thandleError(response, response.getStatusCode(), null, null);\n\t}\n\n\t/**\n\t * Handle the error based on the resolved status code.\n\t * <p>The default implementation delegates to\n\t * {@link HttpClientErrorException#create} for errors in the 4xx range, to\n\t * {@link HttpServerErrorException#create} for errors in the 5xx range,\n\t * or otherwise raises {@link UnknownHttpStatusCodeException}.\n\t * @since 6.2\n\t * @see HttpClientErrorException#create\n\t * @see HttpServerErrorException#create\n\t */\n\tprotected void handleError(\n\t\t\tClientHttpResponse response, HttpStatusCode statusCode,\n\t\t\t@Nullable URI url, @Nullable HttpMethod method) throws IOException {\n\n\t\tString statusText = response.getStatusText();\n\t\tHttpHeaders headers = response.getHeaders();\n\t\tbyte[] body = getResponseBody(response);\n\t\tCharset charset = getCharset(response);\n\t\tString message = getErrorMessage(statusCode.value(), statusText, body, charset, url, method);\n\n\t\tRestClientResponseException ex;\n\t\tif (statusCode.is4xxClientError()) {\n\t\t\tex = HttpClientErrorException.create(message, statusCode, statusText, headers, body, charset);\n\t\t}\n\t\telse if (statusCode.is5xxServerError()) {\n\t\t\tex = HttpServerErrorException.create(message, statusCode, statusText, headers, body, charset);\n\t\t}\n\t\telse {\n\t\t\tex = new UnknownHttpStatusCodeException(message, statusCode.value(), statusText, headers, body, charset);\n\t\t}\n\n\t\tif (!CollectionUtils.isEmpty(this.messageConverters)) {\n\t\t\tex.setBodyConvertFunction(initBodyConvertFunction(response, body));\n\t\t}\n\n\t\tthrow ex;\n\t}\n\n\t/**\n\t * Read the body of the given response (for inclusion in a status exception).\n\t * @param response the response to inspect\n\t * @return the response body as a byte array,\n\t * or an empty byte array if the body could not be read\n\t * @since 4.3.8\n\t */\n\tprotected byte[] getResponseBody(ClientHttpResponse response) {\n\t\treturn RestClientUtils.getBody(response);\n\t}\n\n\t/**\n\t * Determine the charset of the response (for inclusion in a status exception).\n\t * @param response the response to inspect\n\t * @return the associated charset, or {@code null} if none\n\t * @since 4.3.8\n\t */\n\t@Nullable\n\tprotected Charset getCharset(ClientHttpResponse response) {\n\t\tMediaType contentType = response.getHeaders().getContentType();\n\t\treturn (contentType != null ? contentType.getCharset() : null);\n\t}\n\n\t/**\n\t * Return an error message with details from the response body. For example:\n\t * <pre>\n\t * 404 Not Found on GET request for \"https://example.com\": [{'id': 123, 'message': 'my message'}]\n\t * </pre>\n\t */\n\tprivate String getErrorMessage(\n\t\t\tint rawStatusCode, String statusText, @Nullable byte[] responseBody, @Nullable Charset charset,\n\t\t\t@Nullable URI url, @Nullable HttpMethod method) {\n\n\t\tStringBuilder msg = new StringBuilder(rawStatusCode + \" \" + statusText);\n\t\tif (method != null) {\n\t\t\tmsg.append(\" on \").append(method).append(\" request\");\n\t\t}\n\t\tif (url != null) {\n\t\t\tmsg.append(\" for \\\"\");\n\t\t\tString urlString = url.toString();\n\t\t\tint idx = urlString.indexOf('?');\n\t\t\tif (idx != -1) {\n\t\t\t\tmsg.append(urlString, 0, idx);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmsg.append(urlString);\n\t\t\t}\n\t\t\tmsg.append(\"\\\"\");\n\t\t}\n\t\tmsg.append(\": \");\n\t\tif (ObjectUtils.isEmpty(responseBody)) {\n\t\t\tmsg.append(\"[no body]\");\n\t\t}\n\t\telse {\n\t\t\tcharset = (charset != null ? charset : StandardCharsets.UTF_8);\n\t\t\tString bodyText = new String(responseBody, charset);\n\t\t\tbodyText = LogFormatUtils.formatValue(bodyText, -1, true);\n\t\t\tmsg.append(bodyText);\n\t\t}\n\t\treturn msg.toString();\n\t}\n\n\t/**\n\t * Return a function for decoding the error content. This can be passed to\n\t * {@link RestClientResponseException#setBodyConvertFunction(Function)}.\n\t * @since 6.0\n\t */\n\t@SuppressWarnings(\"NullAway\")\n\tprotected Function<ResolvableType, ?> initBodyConvertFunction(ClientHttpResponse response, byte[] body) {\n\t\tAssert.state(!CollectionUtils.isEmpty(this.messageConverters), \"Expected message converters\");\n\t\treturn resolvableType -> {\n\t\t\ttry {\n\t\t\t\tHttpMessageConverterExtractor<?> extractor =\n\t\t\t\t\t\tnew HttpMessageConverterExtractor<>(resolvableType.getType(), this.messageConverters);\n\n\t\t\t\treturn extractor.extractData(new ClientHttpResponseDecorator(response) {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic InputStream getBody() {\n\t\t\t\t\t\treturn new ByteArrayInputStream(body);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new RestClientException(\n\t\t\t\t\t\t\"Error while extracting response for type [\" + resolvableType + \"]\", ex);\n\t\t\t}\n\t\t};\n\t}\n\n\n\tprivate static class HandleErrorResponseDecorator extends ClientHttpResponseDecorator {\n\n\t\tprivate boolean handled = true;\n\n\t\tpublic HandleErrorResponseDecorator(ClientHttpResponse delegate) {\n\t\t\tsuper(delegate);\n\t\t}\n\n\t\tpublic void setNotHandled() {\n\t\t\tthis.handled = false;\n\t\t}\n\n\t\tpublic boolean isHandled() {\n\t\t\treturn this.handled;\n\t\t}\n\t}\n\n}"
  },
  "org.springframework.web.client.DefaultResponseErrorHandler#getBody()": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 279
    },
    "return": "InputStream",
    "signature": "public InputStream getBody()",
    "source_code": "\t\t\t\t\tpublic InputStream getBody() {\n\t\t\t\t\t\treturn new ByteArrayInputStream(body);\n\t\t\t\t\t}"
  },
  "org.springframework.web.client.DefaultResponseErrorHandler#getCharset(response)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Determine the charset of the response (for inclusion in a status exception).\n\t * @param response the response to inspect\n\t * @return the associated charset, or {@code null} if none\n\t * @since 4.3.8\n\t */",
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "response"
    ],
    "position": {
      "column": 1,
      "line": 220
    },
    "return": "Charset",
    "signature": "protected Charset getCharset(ClientHttpResponse response)",
    "source_code": "\tprotected Charset getCharset(ClientHttpResponse response) {\n\t\tMediaType contentType = response.getHeaders().getContentType();\n\t\treturn (contentType != null ? contentType.getCharset() : null);\n\t}"
  },
  "org.springframework.web.client.DefaultResponseErrorHandler#getResponseBody(response)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Read the body of the given response (for inclusion in a status exception).\n\t * @param response the response to inspect\n\t * @return the response body as a byte array,\n\t * or an empty byte array if the body could not be read\n\t * @since 4.3.8\n\t */",
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "response"
    ],
    "position": {
      "column": 1,
      "line": 209
    },
    "return": "byte[]",
    "signature": "protected byte[] getResponseBody(ClientHttpResponse response)",
    "source_code": "\tprotected byte[] getResponseBody(ClientHttpResponse response) {\n\t\treturn RestClientUtils.getBody(response);\n\t}"
  },
  "org.springframework.web.client.DefaultResponseErrorHandler#handleError(response)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "response"
    ],
    "position": {
      "column": 1,
      "line": 152
    },
    "return": "void",
    "signature": "public void handleError(ClientHttpResponse response)",
    "source_code": "\tpublic void handleError(ClientHttpResponse response) throws IOException {\n\n\t\t// Called via handleError(url, method, response)\n\t\tif (response instanceof HandleErrorResponseDecorator decorator) {\n\t\t\tdecorator.setNotHandled();\n\t\t\treturn;\n\t\t}\n\n\t\t// Called directly, so do handle\n\t\thandleError(response, response.getStatusCode(), null, null);\n\t}"
  },
  "org.springframework.web.client.DefaultResponseErrorHandler#handleError(response,statusCode,url,method)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Handle the error based on the resolved status code.\n\t * <p>The default implementation delegates to\n\t * {@link HttpClientErrorException#create} for errors in the 4xx range, to\n\t * {@link HttpServerErrorException#create} for errors in the 5xx range,\n\t * or otherwise raises {@link UnknownHttpStatusCodeException}.\n\t * @since 6.2\n\t * @see HttpClientErrorException#create\n\t * @see HttpServerErrorException#create\n\t */",
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "response",
      "statusCode",
      "url",
      "method"
    ],
    "position": {
      "column": 1,
      "line": 174
    },
    "return": "void",
    "signature": "protected void handleError(ClientHttpResponse response, HttpStatusCode statusCode,\n\t\t\t@Nullable URI url, @Nullable HttpMethod method)",
    "source_code": "\tprotected void handleError("
  },
  "org.springframework.web.client.DefaultResponseErrorHandler#handleError(url,method,response)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Handle the error in the given response with the given resolved status code\n\t * and extra information providing access to the request URL and HTTP method.\n\t * <p>The default implementation throws:\n\t * <ul>\n\t * <li>{@link HttpClientErrorException} if the status code is in the 4xx\n\t * series, or one of its sub-classes such as\n\t * {@link HttpClientErrorException.BadRequest} and others.\n\t * <li>{@link HttpServerErrorException} if the status code is in the 5xx\n\t * series, or one of its sub-classes such as\n\t * {@link HttpServerErrorException.InternalServerError} and others.\n\t * <li>{@link UnknownHttpStatusCodeException} for error status codes not in the\n\t * {@link HttpStatus} enum range.\n\t * </ul>\n\t * @throws UnknownHttpStatusCodeException in case of an unresolvable status code\n\t * @since 6.2\n\t * @see #handleError(ClientHttpResponse, HttpStatusCode, URI, HttpMethod)\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "url",
      "method",
      "response"
    ],
    "position": {
      "column": 1,
      "line": 138
    },
    "return": "void",
    "signature": "public void handleError(URI url, HttpMethod method, ClientHttpResponse response)",
    "source_code": "\tpublic void handleError(URI url, HttpMethod method, ClientHttpResponse response) throws IOException {\n\n\t\t// For backwards compatibility try handle(response) first\n\t\tHandleErrorResponseDecorator decorator = new HandleErrorResponseDecorator(response);\n\t\thandleError(decorator);\n\t\tif (decorator.isHandled()) {\n\t\t\treturn;\n\t\t}\n\n\t\thandleError(response, response.getStatusCode(), url, method);\n\t}"
  },
  "org.springframework.web.client.DefaultResponseErrorHandler#hasError(response)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Delegates to {@link #hasError(HttpStatusCode)} with the response status code.\n\t * @see ClientHttpResponse#getStatusCode()\n\t * @see #hasError(HttpStatusCode)\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "response"
    ],
    "position": {
      "column": 1,
      "line": 83
    },
    "return": "boolean",
    "signature": "public boolean hasError(ClientHttpResponse response)",
    "source_code": "\tpublic boolean hasError(ClientHttpResponse response) throws IOException {\n\t\tHttpStatusCode statusCode = response.getStatusCode();\n\t\treturn hasError(statusCode);\n\t}"
  },
  "org.springframework.web.client.DefaultResponseErrorHandler#hasError(statusCode)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Template method called from {@link #hasError(ClientHttpResponse)}.\n\t * <p>The default implementation checks if the given status code is\n\t * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR CLIENT_ERROR} or\n\t * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR SERVER_ERROR}.\n\t * Can be overridden in subclasses.\n\t * @param statusCode the HTTP status code as raw value\n\t * @return {@code true} if the response indicates an error; {@code false} otherwise\n\t * @since 4.3.21\n\t * @see org.springframework.http.HttpStatus.Series#CLIENT_ERROR\n\t * @see org.springframework.http.HttpStatus.Series#SERVER_ERROR\n\t * @deprecated in favor of {@link #hasError(HttpStatusCode)}\n\t */",
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "statusCode"
    ],
    "position": {
      "column": 1,
      "line": 114
    },
    "return": "boolean",
    "signature": "protected boolean hasError(int statusCode)",
    "source_code": "\tprotected boolean hasError(int statusCode) {\n\t\tHttpStatus.Series series = HttpStatus.Series.resolve(statusCode);\n\t\treturn (series == HttpStatus.Series.CLIENT_ERROR || series == HttpStatus.Series.SERVER_ERROR);\n\t}"
  },
  "org.springframework.web.client.DefaultResponseErrorHandler#isHandled()": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 304
    },
    "return": "boolean",
    "signature": "public boolean isHandled()",
    "source_code": "\t\tpublic boolean isHandled() {\n\t\t\treturn this.handled;\n\t\t}"
  },
  "org.springframework.web.client.DefaultResponseErrorHandler#setNotHandled()": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 300
    },
    "return": "void",
    "signature": "public void setNotHandled()",
    "source_code": "\t\tpublic void setNotHandled() {\n\t\t\tthis.handled = false;\n\t\t}"
  },
  "org.springframework.web.reactive.function.server.<unknown>#build()": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 156
    },
    "return": "Mono<RenderingResponse>",
    "signature": "public Mono<RenderingResponse> build()",
    "source_code": "\tpublic Mono<RenderingResponse> build() {\n\t\treturn Mono.just(\n\t\t\t\tnew DefaultRenderingResponse(this.status, this.headers, this.cookies, this.name, this.model));\n\t}"
  },
  "org.springframework.web.servlet.config.MvcNamespaceUtils#registerPatternParser(patternParserRef,context,source)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Adds an alias to an existing well-known name or registers a new instance of a {@link PathPatternParser}\n\t * under that well-known name, unless already registered.\n\t * @return a RuntimeBeanReference to this {@link PathPatternParser} instance\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "patternParserRef",
      "context",
      "source"
    ],
    "position": {
      "column": 1,
      "line": 170
    },
    "return": "RuntimeBeanReference",
    "signature": "public RuntimeBeanReference registerPatternParser(@Nullable RuntimeBeanReference patternParserRef,\n\t\t\tParserContext context, @Nullable Object source)",
    "source_code": "\tpublic static RuntimeBeanReference registerPatternParser(@Nullable RuntimeBeanReference patternParserRef,"
  },
  "org.springframework.web.servlet.function.<unknown>#build()": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 209
    },
    "return": "EntityResponse<T>",
    "signature": "public EntityResponse<T> build()",
    "source_code": "\tpublic EntityResponse<T> build() {\n\t\tif (this.entity instanceof CompletionStage completionStage) {\n\t\t\treturn new CompletionStageEntityResponse(this.status, this.headers, this.cookies,\n\t\t\t\t\tcompletionStage, this.entityType);\n\t\t}\n\t\telse if (DefaultAsyncServerResponse.reactiveStreamsPresent) {\n\t\t\tReactiveAdapter adapter = ReactiveAdapterRegistry.getSharedInstance().getAdapter(this.entity.getClass());\n\t\t\tif (adapter != null) {\n\t\t\t\tPublisher<T> publisher = adapter.toPublisher(this.entity);\n\t\t\t\treturn new PublisherEntityResponse(this.status, this.headers, this.cookies, publisher, this.entityType);\n\t\t\t}\n\t\t}\n\t\treturn new DefaultEntityResponse<>(this.status, this.headers, this.cookies, this.entity, this.entityType);\n\t}"
  },
  "org.springframework.web.servlet.function.<unknown>#onComplete(onCompletion)": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "onCompletion"
    ],
    "position": {
      "column": 1,
      "line": 275
    },
    "return": "SseBuilder",
    "signature": "public SseBuilder onComplete(Runnable onCompletion)",
    "source_code": "\t\tpublic SseBuilder onComplete(Runnable onCompletion) {\n\t\t\tthis.deferredResult.onCompletion(onCompletion);\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.web.servlet.function.<unknown>#onError(onError)": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "onError"
    ],
    "position": {
      "column": 1,
      "line": 269
    },
    "return": "SseBuilder",
    "signature": "public SseBuilder onError(Consumer<Throwable> onError)",
    "source_code": "\t\tpublic SseBuilder onError(Consumer<Throwable> onError) {\n\t\t\tthis.deferredResult.onError(onError);\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.web.servlet.function.<unknown>#onTimeout(onTimeout)": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "onTimeout"
    ],
    "position": {
      "column": 1,
      "line": 263
    },
    "return": "SseBuilder",
    "signature": "public SseBuilder onTimeout(Runnable onTimeout)",
    "source_code": "\t\tpublic SseBuilder onTimeout(Runnable onTimeout) {\n\t\t\tthis.deferredResult.onTimeout(onTimeout);\n\t\t\treturn this;\n\t\t}"
  }
}