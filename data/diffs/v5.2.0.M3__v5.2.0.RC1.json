{
  "org.springframework.core.io.buffer.DefaultDataBuffer#toString(index,length,charset)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "index",
      "length",
      "charset"
    ],
    "position": {
      "column": 1,
      "line": 386
    },
    "return": "String",
    "signature": "public String toString(int index, int length, Charset charset)",
    "source_code": "\tpublic String toString(int index, int length, Charset charset) {\n\t\tcheckIndex(index, length);\n\t\tAssert.notNull(charset, \"Charset must not be null\");\n\n\t\tbyte[] bytes;\n\t\tint offset;\n\n\t\tif (this.byteBuffer.hasArray()) {\n\t\t\tbytes = this.byteBuffer.array();\n\t\t\toffset = this.byteBuffer.arrayOffset() + index;\n\t\t}\n\t\telse {\n\t\t\tbytes = new byte[length];\n\t\t\toffset = 0;\n\t\t\tByteBuffer duplicate = this.byteBuffer.duplicate();\n\t\t\tduplicate.clear().position(index).limit(index + length);\n\t\t\tduplicate.get(bytes, 0, length);\n\t\t}\n\t\treturn new String(bytes, offset, length, charset);\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#afterPropertiesSet()": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 194
    },
    "return": "void",
    "signature": "public void afterPropertiesSet()",
    "source_code": "\tpublic void afterPropertiesSet() {\n\n\t\t// Initialize RouteMatcher before parent initializes handler mappings\n\t\tif (this.routeMatcher == null) {\n\t\t\tAntPathMatcher pathMatcher = new AntPathMatcher();\n\t\t\tpathMatcher.setPathSeparator(\".\");\n\t\t\tthis.routeMatcher = new SimpleRouteMatcher(pathMatcher);\n\t\t}\n\n\t\tsuper.afterPropertiesSet();\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#getCondition(element)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Determine the mapping condition for the given annotated element.\n\t * @param element the element to check\n\t * @return the condition, or {@code null}\n\t */",
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "element"
    ],
    "position": {
      "column": 1,
      "line": 258
    },
    "return": "CompositeMessageCondition",
    "signature": "protected CompositeMessageCondition getCondition(AnnotatedElement element)",
    "source_code": "\tprotected CompositeMessageCondition getCondition(AnnotatedElement element) {\n\t\tMessageMapping ann = AnnotatedElementUtils.findMergedAnnotation(element, MessageMapping.class);\n\t\tif (ann == null || ann.value().length == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString[] patterns = processDestinations(ann.value());\n\t\treturn new CompositeMessageCondition(\n\t\t\t\tnew DestinationPatternsMessageCondition(patterns, obtainRouteMatcher()));\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#obtainRouteMatcher()": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Obtain the {@code RouteMatcher} for actual use.\n\t * @return the RouteMatcher (never {@code null})\n\t * @throws IllegalStateException in case of no RouteMatcher set\n\t * @since 5.0\n\t */",
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 164
    },
    "return": "RouteMatcher",
    "signature": "protected RouteMatcher obtainRouteMatcher()",
    "source_code": "\tprotected RouteMatcher obtainRouteMatcher() {\n\t\tRouteMatcher routeMatcher = getRouteMatcher();\n\t\tAssert.state(routeMatcher != null, \"No RouteMatcher set\");\n\t\treturn routeMatcher;\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#processDestinations(destinations)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Resolve placeholders in the given destinations.\n\t * @param destinations the destinations\n\t * @return new array with the processed destinations or the same array\n\t */",
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "destinations"
    ],
    "position": {
      "column": 1,
      "line": 273
    },
    "return": "String[]",
    "signature": "protected String[] processDestinations(String[] destinations)",
    "source_code": "\tprotected String[] processDestinations(String[] destinations) {\n\t\tif (this.valueResolver != null) {\n\t\t\tdestinations = Arrays.stream(destinations)\n\t\t\t\t\t.map(s -> this.valueResolver.resolveStringValue(s))\n\t\t\t\t\t.toArray(String[]::new);\n\t\t}\n\t\treturn destinations;\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#setAutoDetectDisabled()": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * Disable auto-detection of {@code @MessageMapping} methods, e.g. in\n\t * {@code @Controller}s, by setting {@link #setHandlerPredicate(Predicate)\n\t * setHandlerPredicate(null)}.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 156
    },
    "return": "void",
    "signature": "public void setAutoDetectDisabled()",
    "source_code": "\tpublic void setAutoDetectDisabled() {\n\t\tthis.handlerPredicate = null;\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#setHandlerPredicate(handlerPredicate)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * Configure the predicate to use for selecting which Spring beans to check\n\t * for {@code @MessageMapping} methods. When set to {@code null},\n\t * auto-detection is turned off which is what\n\t * {@link #setAutoDetectDisabled()} does internally.\n\t * <p>The predicate used by default selects {@code @Controller} classes.\n\t * @see #setHandlers(List)\n\t * @see #setAutoDetectDisabled()\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "handlerPredicate"
    ],
    "position": {
      "column": 1,
      "line": 139
    },
    "return": "void",
    "signature": "public void setHandlerPredicate(@Nullable Predicate<Class<?>> handlerPredicate)",
    "source_code": "\tpublic void setHandlerPredicate(@Nullable Predicate<Class<?>> handlerPredicate) {\n\t\tthis.handlerPredicate = handlerPredicate;\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#setHandlers(handlers)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * Manually configure handlers to check for {@code @MessageMapping} methods.\n\t * <p><strong>Note:</strong> the given handlers are not required to be\n\t * annotated with {@code @Controller}. Consider also using\n\t * {@link #setAutoDetectDisabled()} if the intent is to use these handlers\n\t * instead of, and not in addition to {@code @Controller} classes. Or\n\t * alternatively use {@link #setHandlerPredicate(Predicate)} to select a\n\t * different set of beans based on a different criteria.\n\t * @param handlers the handlers to register\n\t * @see #setAutoDetectDisabled()\n\t * @see #setHandlerPredicate(Predicate)\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "handlers"
    ],
    "position": {
      "column": 1,
      "line": 122
    },
    "return": "void",
    "signature": "public void setHandlers(List<Object> handlers)",
    "source_code": "\tpublic void setHandlers(List<Object> handlers) {\n\t\tfor (Object handler : handlers) {\n\t\t\tdetectHandlerMethods(handler);\n\t\t}\n\t\t// Disable auto-detection..\n\t\tthis.handlerPredicate = null;\n\t}"
  }
}