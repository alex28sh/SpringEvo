{
  "org.springframework.aot.hint.BindingReflectionHintsRegistrar#registerComponentHints(hints,type)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "hints",
      "type"
    ],
    "position": {
      "column": 1,
      "line": 155
    },
    "return": "void",
    "signature": "public void registerComponentHints(ReflectionHints hints, Class<?> type)",
    "source_code": "\t\tpublic static void registerComponentHints(ReflectionHints hints, Class<?> type) {\n\t\t\tKClass<?> kClass = JvmClassMappingKt.getKotlinClass(type);\n\t\t\tif (kClass.isData()) {\n\t\t\t\tfor (Method method : type.getMethods()) {\n\t\t\t\t\tString methodName = method.getName();\n\t\t\t\t\tif (methodName.startsWith(\"component\") || methodName.equals(\"copy\")) {\n\t\t\t\t\t\thints.registerMethod(method, ExecutableMode.INVOKE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#artifactId(artifactId)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t\t/**\n\t\t\t * Set the artifact ID of the application.\n\t\t\t * @param artifactId the artifact ID of the application, used to locate\n\t\t\t * {@code native-image.properties}\n\t\t\t * @return this builder for method chaining\n\t\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "artifactId"
    ],
    "position": {
      "column": 1,
      "line": 270
    },
    "return": "Builder",
    "signature": "public Builder artifactId(String artifactId)",
    "source_code": "\t\t\tpublic Builder artifactId(String artifactId) {\n\t\t\t\tthis.artifactId = artifactId;\n\t\t\t\treturn this;\n\t\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#build()": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t\t/**\n\t\t\t * Build the {@link Settings} configured in this {@code Builder}.\n\t\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 278
    },
    "return": "Settings",
    "signature": "public Settings build()",
    "source_code": "\t\t\tpublic Settings build() {\n\t\t\t\tAssert.notNull(this.sourceOutput, \"'sourceOutput' must not be null\");\n\t\t\t\tAssert.notNull(this.resourceOutput, \"'resourceOutput' must not be null\");\n\t\t\t\tAssert.notNull(this.classOutput, \"'classOutput' must not be null\");\n\t\t\t\tAssert.hasText(this.groupId, \"'groupId' must not be null or empty\");\n\t\t\t\tAssert.hasText(this.artifactId, \"'artifactId' must not be null or empty\");\n\t\t\t\treturn new Settings(this.sourceOutput, this.resourceOutput, this.classOutput,\n\t\t\t\t\t\tthis.groupId, this.artifactId);\n\t\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#builder()": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Create a new {@link Builder} for {@link Settings}.\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 156
    },
    "return": "Builder",
    "signature": "public Builder builder()",
    "source_code": "\t\tpublic static Builder builder() {\n\t\t\treturn new Builder();\n\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#classOutput(classOutput)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t\t/**\n\t\t\t * Set the output directory for generated classes.\n\t\t\t * @param classOutput the location of generated classes\n\t\t\t * @return this builder for method chaining\n\t\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "classOutput"
    ],
    "position": {
      "column": 1,
      "line": 248
    },
    "return": "Builder",
    "signature": "public Builder classOutput(Path classOutput)",
    "source_code": "\t\t\tpublic Builder classOutput(Path classOutput) {\n\t\t\t\tthis.classOutput = classOutput;\n\t\t\t\treturn this;\n\t\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#doProcess()": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 89
    },
    "return": "T",
    "signature": "protected T doProcess()",
    "source_code": "\tprotected abstract T doProcess();"
  },
  "org.springframework.context.aot.AbstractAotProcessor#groupId(groupId)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t\t/**\n\t\t\t * Set the group ID of the application.\n\t\t\t * @param groupId the group ID of the application, used to locate\n\t\t\t * {@code native-image.properties}\n\t\t\t * @return this builder for method chaining\n\t\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "groupId"
    ],
    "position": {
      "column": 1,
      "line": 259
    },
    "return": "Builder",
    "signature": "public Builder groupId(String groupId)",
    "source_code": "\t\t\tpublic Builder groupId(String groupId) {\n\t\t\t\tthis.groupId = groupId;\n\t\t\t\treturn this;\n\t\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#process()": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Run AOT processing.\n\t * @return the result of the processing.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 79
    },
    "return": "T",
    "signature": "public T process()",
    "source_code": "\tpublic final T process() {\n\t\ttry {\n\t\t\tSystem.setProperty(AOT_PROCESSING, \"true\");\n\t\t\treturn doProcess();\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(AOT_PROCESSING);\n\t\t}\n\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#resourceOutput(resourceOutput)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t\t/**\n\t\t\t * Set the output directory for generated resources.\n\t\t\t * @param resourceOutput the location of generated resources\n\t\t\t * @return this builder for method chaining\n\t\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "resourceOutput"
    ],
    "position": {
      "column": 1,
      "line": 238
    },
    "return": "Builder",
    "signature": "public Builder resourceOutput(Path resourceOutput)",
    "source_code": "\t\t\tpublic Builder resourceOutput(Path resourceOutput) {\n\t\t\t\tthis.resourceOutput = resourceOutput;\n\t\t\t\treturn this;\n\t\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#setArtifactId(artifactId)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Set the artifact ID of the application.\n\t\t * @param artifactId the artifact ID of the application, used to locate\n\t\t * {@code native-image.properties}\n\t\t * @return this settings object for method chaining\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "artifactId"
    ],
    "position": {
      "column": 1,
      "line": 202
    },
    "return": "Settings",
    "signature": "public Settings setArtifactId(String artifactId)",
    "source_code": "\t\tpublic Settings setArtifactId(String artifactId) {\n\t\t\tthis.artifactId = artifactId;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#setClassOutput(classOutput)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Set the output directory for generated classes.\n\t\t * @param classOutput the location of generated classes\n\t\t * @return this settings object for method chaining\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "classOutput"
    ],
    "position": {
      "column": 1,
      "line": 164
    },
    "return": "Settings",
    "signature": "public Settings setClassOutput(Path classOutput)",
    "source_code": "\t\tpublic Settings setClassOutput(Path classOutput) {\n\t\t\tthis.classOutput = classOutput;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#setGroupId(groupId)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Set the group ID of the application.\n\t\t * @param groupId the group ID of the application, used to locate\n\t\t * {@code native-image.properties}\n\t\t * @return this settings object for method chaining\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "groupId"
    ],
    "position": {
      "column": 1,
      "line": 183
    },
    "return": "Settings",
    "signature": "public Settings setGroupId(String groupId)",
    "source_code": "\t\tpublic Settings setGroupId(String groupId) {\n\t\t\tthis.groupId = groupId;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#setResourceOutput(resourceOutput)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Set the output directory for generated resources.\n\t\t * @param resourceOutput the location of generated resources\n\t\t * @return this settings object for method chaining\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "resourceOutput"
    ],
    "position": {
      "column": 1,
      "line": 146
    },
    "return": "Settings",
    "signature": "public Settings setResourceOutput(Path resourceOutput)",
    "source_code": "\t\tpublic Settings setResourceOutput(Path resourceOutput) {\n\t\t\tthis.resourceOutput = resourceOutput;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#setSourceOutput(sourceOutput)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Set the output directory for generated sources.\n\t\t * @param sourceOutput the location of generated sources\n\t\t * @return this settings object for method chaining\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "sourceOutput"
    ],
    "position": {
      "column": 1,
      "line": 128
    },
    "return": "Settings",
    "signature": "public Settings setSourceOutput(Path sourceOutput)",
    "source_code": "\t\tpublic Settings setSourceOutput(Path sourceOutput) {\n\t\t\tthis.sourceOutput = sourceOutput;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.context.aot.AbstractAotProcessor#sourceOutput(sourceOutput)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t\t/**\n\t\t\t * Set the output directory for generated sources.\n\t\t\t * @param sourceOutput the location of generated sources\n\t\t\t * @return this builder for method chaining\n\t\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "sourceOutput"
    ],
    "position": {
      "column": 1,
      "line": 228
    },
    "return": "Builder",
    "signature": "public Builder sourceOutput(Path sourceOutput)",
    "source_code": "\t\t\tpublic Builder sourceOutput(Path sourceOutput) {\n\t\t\t\tthis.sourceOutput = sourceOutput;\n\t\t\t\treturn this;\n\t\t\t}"
  },
  "org.springframework.context.aot.Builder": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Fluent builder API for {@link Settings}.\n\t\t */",
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 200
    },
    "signature": "public class Builder",
    "source_code": "\t\tpublic static final class Builder {\n\n\t\t\t@Nullable\n\t\t\tprivate Path sourceOutput;\n\n\t\t\t@Nullable\n\t\t\tprivate Path resourceOutput;\n\n\t\t\t@Nullable\n\t\t\tprivate Path classOutput;\n\n\t\t\t@Nullable\n\t\t\tprivate String groupId;\n\n\t\t\t@Nullable\n\t\t\tprivate String artifactId;\n\n\n\t\t\tprivate Builder() {\n\t\t\t\t// internal constructor\n\t\t\t}\n\n\n\t\t\t/**\n\t\t\t * Set the output directory for generated sources.\n\t\t\t * @param sourceOutput the location of generated sources\n\t\t\t * @return this builder for method chaining\n\t\t\t */\n\t\t\tpublic Builder sourceOutput(Path sourceOutput) {\n\t\t\t\tthis.sourceOutput = sourceOutput;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Set the output directory for generated resources.\n\t\t\t * @param resourceOutput the location of generated resources\n\t\t\t * @return this builder for method chaining\n\t\t\t */\n\t\t\tpublic Builder resourceOutput(Path resourceOutput) {\n\t\t\t\tthis.resourceOutput = resourceOutput;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Set the output directory for generated classes.\n\t\t\t * @param classOutput the location of generated classes\n\t\t\t * @return this builder for method chaining\n\t\t\t */\n\t\t\tpublic Builder classOutput(Path classOutput) {\n\t\t\t\tthis.classOutput = classOutput;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Set the group ID of the application.\n\t\t\t * @param groupId the group ID of the application, used to locate\n\t\t\t * {@code native-image.properties}\n\t\t\t * @return this builder for method chaining\n\t\t\t */\n\t\t\tpublic Builder groupId(String groupId) {\n\t\t\t\tthis.groupId = groupId;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Set the artifact ID of the application.\n\t\t\t * @param artifactId the artifact ID of the application, used to locate\n\t\t\t * {@code native-image.properties}\n\t\t\t * @return this builder for method chaining\n\t\t\t */\n\t\t\tpublic Builder artifactId(String artifactId) {\n\t\t\t\tthis.artifactId = artifactId;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Build the {@link Settings} configured in this {@code Builder}.\n\t\t\t */\n\t\t\tpublic Settings build() {\n\t\t\t\tAssert.notNull(this.sourceOutput, \"'sourceOutput' must not be null\");\n\t\t\t\tAssert.notNull(this.resourceOutput, \"'resourceOutput' must not be null\");\n\t\t\t\tAssert.notNull(this.classOutput, \"'classOutput' must not be null\");\n\t\t\t\tAssert.hasText(this.groupId, \"'groupId' must not be null or empty\");\n\t\t\t\tAssert.hasText(this.artifactId, \"'artifactId' must not be null or empty\");\n\t\t\t\treturn new Settings(this.sourceOutput, this.resourceOutput, this.classOutput,\n\t\t\t\t\t\tthis.groupId, this.artifactId);\n\t\t\t}\n\n\t\t}"
  },
  "org.springframework.http.client.<unknown>#getMethodValue()": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 65
    },
    "return": "String",
    "signature": "public String getMethodValue()",
    "source_code": "\tpublic String getMethodValue() {\n\t\treturn this.method.name();\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention": {
    "change": "added",
    "deprecated": false,
    "doc": "/**\n * Default implementation for a {@link ClientRequestObservationConvention},\n * extracting information from the {@link ClientRequestObservationContext}.\n *\n * @author Brian Clozel\n * @since 6.0\n */",
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 36
    },
    "signature": "public class DefaultClientRequestObservationConvention",
    "source_code": "public class DefaultClientRequestObservationConvention implements ClientRequestObservationConvention {\n\n\tprivate static final String DEFAULT_NAME = \"http.client.requests\";\n\n\tprivate static final KeyValue URI_NONE = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.URI, KeyValue.NONE_VALUE);\n\n\tprivate static final KeyValue METHOD_NONE = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, KeyValue.NONE_VALUE);\n\n\tprivate static final KeyValue STATUS_IO_ERROR = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, \"IO_ERROR\");\n\n\tprivate static final KeyValue STATUS_CLIENT_ERROR = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, \"CLIENT_ERROR\");\n\n\tprivate static final KeyValue HTTP_OUTCOME_SUCCESS = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, \"SUCCESS\");\n\n\tprivate static final KeyValue HTTP_OUTCOME_UNKNOWN = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, \"UNKNOWN\");\n\n\tprivate static final KeyValue EXCEPTION_NONE = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION, KeyValue.NONE_VALUE);\n\n\tprivate static final KeyValue HTTP_URL_NONE = KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, KeyValue.NONE_VALUE);\n\n\tprivate static final KeyValue CLIENT_NAME_NONE = KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.CLIENT_NAME, KeyValue.NONE_VALUE);\n\n\n\tprivate final String name;\n\n\t/**\n\t * Create a convention with the default name {@code \"http.client.requests\"}.\n\t */\n\tpublic DefaultClientRequestObservationConvention() {\n\t\tthis(DEFAULT_NAME);\n\t}\n\n\t/**\n\t * Create a convention with a custom name.\n\t * @param name the observation name\n\t */\n\tpublic DefaultClientRequestObservationConvention(String name) {\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\t@Override\n\tpublic String getContextualName(ClientRequestObservationContext context) {\n\t\treturn \"http \" + context.getCarrier().getMethod().name().toLowerCase();\n\t}\n\n\t@Override\n\tpublic KeyValues getLowCardinalityKeyValues(ClientRequestObservationContext context) {\n\t\treturn KeyValues.of(uri(context), method(context), status(context), exception(context), outcome(context));\n\t}\n\n\tprotected KeyValue uri(ClientRequestObservationContext context) {\n\t\tif (context.getUriTemplate() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.URI, context.getUriTemplate());\n\t\t}\n\t\treturn URI_NONE;\n\t}\n\n\tprotected KeyValue method(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, context.getCarrier().getMethod().name());\n\t\t}\n\t\telse {\n\t\t\treturn METHOD_NONE;\n\t\t}\n\t}\n\n\tprotected KeyValue status(ClientRequestObservationContext context) {\n\t\tClientHttpResponse response = context.getResponse();\n\t\tif (response == null) {\n\t\t\treturn STATUS_CLIENT_ERROR;\n\t\t}\n\t\ttry {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, String.valueOf(response.getStatusCode().value()));\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn STATUS_IO_ERROR;\n\t\t}\n\t}\n\n\tprotected KeyValue exception(ClientRequestObservationContext context) {\n\t\tThrowable error = context.getError();\n\t\tif (error != null) {\n\t\t\tString simpleName = error.getClass().getSimpleName();\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION,\n\t\t\t\t\tStringUtils.hasText(simpleName) ? simpleName : error.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}\n\n\tprotected static KeyValue outcome(ClientRequestObservationContext context) {\n\t\tif (context.getResponse() != null) {\n\t\t\ttry {\n\t\t\t\treturn HttpOutcome.forStatus(context.getResponse().getStatusCode());\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\t// Continue\n\t\t\t}\n\t\t}\n\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t}\n\n\t@Override\n\tpublic KeyValues getHighCardinalityKeyValues(ClientRequestObservationContext context) {\n\t\treturn KeyValues.of(requestUri(context), clientName(context));\n\t}\n\n\tprotected KeyValue requestUri(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, context.getCarrier().getURI().toASCIIString());\n\t\t}\n\t\treturn HTTP_URL_NONE;\n\t}\n\n\tprotected KeyValue clientName(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null && context.getCarrier().getURI().getHost() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.CLIENT_NAME, context.getCarrier().getURI().getHost());\n\t\t}\n\t\treturn CLIENT_NAME_NONE;\n\t}\n\n\tstatic class HttpOutcome {\n\n\t\tstatic KeyValue forStatus(HttpStatusCode statusCode) {\n\t\t\tif (statusCode.is2xxSuccessful()) {\n\t\t\t\treturn HTTP_OUTCOME_SUCCESS;\n\t\t\t}\n\t\t\telse if (statusCode instanceof HttpStatus status) {\n\t\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, status.series().name());\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t\t\t}\n\t\t}\n\n\t}\n\n}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#clientName(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 154
    },
    "return": "KeyValue",
    "signature": "protected KeyValue clientName(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue clientName(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null && context.getCarrier().getURI().getHost() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.CLIENT_NAME, context.getCarrier().getURI().getHost());\n\t\t}\n\t\treturn CLIENT_NAME_NONE;\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#exception(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 120
    },
    "return": "KeyValue",
    "signature": "protected KeyValue exception(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue exception(ClientRequestObservationContext context) {\n\t\tThrowable error = context.getError();\n\t\tif (error != null) {\n\t\t\tString simpleName = error.getClass().getSimpleName();\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION,\n\t\t\t\t\tStringUtils.hasText(simpleName) ? simpleName : error.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#getContextualName(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 82
    },
    "return": "String",
    "signature": "public String getContextualName(ClientRequestObservationContext context)",
    "source_code": "\tpublic String getContextualName(ClientRequestObservationContext context) {\n\t\treturn \"http \" + context.getCarrier().getMethod().name().toLowerCase();\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#getHighCardinalityKeyValues(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 143
    },
    "return": "KeyValues",
    "signature": "public KeyValues getHighCardinalityKeyValues(ClientRequestObservationContext context)",
    "source_code": "\tpublic KeyValues getHighCardinalityKeyValues(ClientRequestObservationContext context) {\n\t\treturn KeyValues.of(requestUri(context), clientName(context));\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#getLowCardinalityKeyValues(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 87
    },
    "return": "KeyValues",
    "signature": "public KeyValues getLowCardinalityKeyValues(ClientRequestObservationContext context)",
    "source_code": "\tpublic KeyValues getLowCardinalityKeyValues(ClientRequestObservationContext context) {\n\t\treturn KeyValues.of(uri(context), method(context), status(context), exception(context), outcome(context));\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#getName()": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 77
    },
    "return": "String",
    "signature": "public String getName()",
    "source_code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#method(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 98
    },
    "return": "KeyValue",
    "signature": "protected KeyValue method(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue method(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, context.getCarrier().getMethod().name());\n\t\t}\n\t\telse {\n\t\t\treturn METHOD_NONE;\n\t\t}\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#outcome(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 130
    },
    "return": "KeyValue",
    "signature": "protected KeyValue outcome(ClientRequestObservationContext context)",
    "source_code": "\tprotected static KeyValue outcome(ClientRequestObservationContext context) {\n\t\tif (context.getResponse() != null) {\n\t\t\ttry {\n\t\t\t\treturn HttpOutcome.forStatus(context.getResponse().getStatusCode());\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\t// Continue\n\t\t\t}\n\t\t}\n\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#requestUri(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 147
    },
    "return": "KeyValue",
    "signature": "protected KeyValue requestUri(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue requestUri(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, context.getCarrier().getURI().toASCIIString());\n\t\t}\n\t\treturn HTTP_URL_NONE;\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#status(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 107
    },
    "return": "KeyValue",
    "signature": "protected KeyValue status(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue status(ClientRequestObservationContext context) {\n\t\tClientHttpResponse response = context.getResponse();\n\t\tif (response == null) {\n\t\t\treturn STATUS_CLIENT_ERROR;\n\t\t}\n\t\ttry {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, String.valueOf(response.getStatusCode().value()));\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn STATUS_IO_ERROR;\n\t\t}\n\t}"
  },
  "org.springframework.http.client.observation.DefaultClientRequestObservationConvention#uri(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 91
    },
    "return": "KeyValue",
    "signature": "protected KeyValue uri(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue uri(ClientRequestObservationContext context) {\n\t\tif (context.getUriTemplate() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.URI, context.getUriTemplate());\n\t\t}\n\t\treturn URI_NONE;\n\t}"
  },
  "org.springframework.http.client.reactive.<unknown>#getRawStatusCode()": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 139
    },
    "return": "int",
    "signature": "public int getRawStatusCode()",
    "source_code": "\tpublic int getRawStatusCode() {\n\t\treturn this.response.status().code();\n\t}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention": {
    "change": "added",
    "deprecated": false,
    "doc": "/**\n * Default {@link ServerRequestObservationConvention}.\n * @author Brian Clozel\n * @since 6.0\n */",
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 31
    },
    "signature": "public class DefaultServerRequestObservationConvention",
    "source_code": "public class DefaultServerRequestObservationConvention implements ServerRequestObservationConvention {\n\n\tprivate static final String DEFAULT_NAME = \"http.server.requests\";\n\n\tprivate static final KeyValue METHOD_UNKNOWN = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, \"UNKNOWN\");\n\n\tprivate static final KeyValue STATUS_UNKNOWN = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, \"UNKNOWN\");\n\n\tprivate static final KeyValue HTTP_OUTCOME_SUCCESS = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, \"SUCCESS\");\n\n\tprivate static final KeyValue HTTP_OUTCOME_UNKNOWN = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, \"UNKNOWN\");\n\n\tprivate static final KeyValue URI_UNKNOWN = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, \"UNKNOWN\");\n\n\tprivate static final KeyValue URI_ROOT = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, \"root\");\n\n\tprivate static final KeyValue URI_NOT_FOUND = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, \"NOT_FOUND\");\n\n\tprivate static final KeyValue URI_REDIRECTION = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, \"REDIRECTION\");\n\n\tprivate static final KeyValue EXCEPTION_NONE = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION, KeyValue.NONE_VALUE);\n\n\tprivate static final KeyValue HTTP_URL_UNKNOWN = KeyValue.of(ServerHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, \"UNKNOWN\");\n\n\tprivate final String name;\n\n\t/**\n\t * Create a convention with the default name {@code \"http.server.requests\"}.\n\t */\n\tpublic DefaultServerRequestObservationConvention() {\n\t\tthis(DEFAULT_NAME);\n\t}\n\n\t/**\n\t * Create a convention with a custom name.\n\t * @param name the observation name\n\t */\n\tpublic DefaultServerRequestObservationConvention(String name) {\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\t@Override\n\tpublic String getContextualName(ServerRequestObservationContext context) {\n\t\treturn \"http \" + context.getCarrier().getMethod().toLowerCase();\n\t}\n\n\t@Override\n\tpublic KeyValues getLowCardinalityKeyValues(ServerRequestObservationContext context) {\n\t\treturn KeyValues.of(method(context), uri(context), status(context), exception(context), outcome(context));\n\t}\n\n\t@Override\n\tpublic KeyValues getHighCardinalityKeyValues(ServerRequestObservationContext context) {\n\t\treturn KeyValues.of(httpUrl(context));\n\t}\n\n\tprotected KeyValue method(ServerRequestObservationContext context) {\n\t\treturn (context.getCarrier() != null) ? KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, context.getCarrier().getMethod()) : METHOD_UNKNOWN;\n\t}\n\n\tprotected KeyValue status(ServerRequestObservationContext context) {\n\t\treturn (context.getResponse() != null) ? KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, Integer.toString(context.getResponse().getStatus())) : STATUS_UNKNOWN;\n\t}\n\n\tprotected KeyValue uri(ServerRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\tString pattern = context.getPathPattern();\n\t\t\tif (pattern != null) {\n\t\t\t\tif (pattern.isEmpty()) {\n\t\t\t\t\treturn URI_ROOT;\n\t\t\t\t}\n\t\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, pattern);\n\t\t\t}\n\t\t\tif (context.getResponse() != null) {\n\t\t\t\tHttpStatus status = HttpStatus.resolve(context.getResponse().getStatus());\n\t\t\t\tif (status != null) {\n\t\t\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\t\t\treturn URI_REDIRECTION;\n\t\t\t\t\t}\n\t\t\t\t\tif (status == HttpStatus.NOT_FOUND) {\n\t\t\t\t\t\treturn URI_NOT_FOUND;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn URI_UNKNOWN;\n\t}\n\n\tprotected KeyValue exception(ServerRequestObservationContext context) {\n\t\tThrowable error = context.getError();\n\t\tif (error != null) {\n\t\t\tString simpleName = error.getClass().getSimpleName();\n\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION,\n\t\t\t\t\tStringUtils.hasText(simpleName) ? simpleName : error.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}\n\n\tprotected KeyValue outcome(ServerRequestObservationContext context) {\n\t\tif (context.getResponse() != null) {\n\t\t\tHttpStatusCode statusCode = HttpStatusCode.valueOf(context.getResponse().getStatus());\n\t\t\treturn HttpOutcome.forStatus(statusCode);\n\t\t}\n\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t}\n\n\tprotected KeyValue httpUrl(ServerRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, context.getCarrier().getRequestURI());\n\t\t}\n\t\treturn HTTP_URL_UNKNOWN;\n\t}\n\n\n\tstatic class HttpOutcome {\n\n\t\tstatic KeyValue forStatus(HttpStatusCode statusCode) {\n\t\t\tif (statusCode.is2xxSuccessful()) {\n\t\t\t\treturn HTTP_OUTCOME_SUCCESS;\n\t\t\t}\n\t\t\telse if (statusCode instanceof HttpStatus status) {\n\t\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, status.series().name());\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t\t\t}\n\t\t}\n\n\t}\n\n}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention#exception(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 124
    },
    "return": "KeyValue",
    "signature": "protected KeyValue exception(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue exception(ServerRequestObservationContext context) {\n\t\tThrowable error = context.getError();\n\t\tif (error != null) {\n\t\t\tString simpleName = error.getClass().getSimpleName();\n\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION,\n\t\t\t\t\tStringUtils.hasText(simpleName) ? simpleName : error.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention#getContextualName(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 78
    },
    "return": "String",
    "signature": "public String getContextualName(ServerRequestObservationContext context)",
    "source_code": "\tpublic String getContextualName(ServerRequestObservationContext context) {\n\t\treturn \"http \" + context.getCarrier().getMethod().toLowerCase();\n\t}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention#getHighCardinalityKeyValues(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 88
    },
    "return": "KeyValues",
    "signature": "public KeyValues getHighCardinalityKeyValues(ServerRequestObservationContext context)",
    "source_code": "\tpublic KeyValues getHighCardinalityKeyValues(ServerRequestObservationContext context) {\n\t\treturn KeyValues.of(httpUrl(context));\n\t}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention#getLowCardinalityKeyValues(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 83
    },
    "return": "KeyValues",
    "signature": "public KeyValues getLowCardinalityKeyValues(ServerRequestObservationContext context)",
    "source_code": "\tpublic KeyValues getLowCardinalityKeyValues(ServerRequestObservationContext context) {\n\t\treturn KeyValues.of(method(context), uri(context), status(context), exception(context), outcome(context));\n\t}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention#getName()": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 73
    },
    "return": "String",
    "signature": "public String getName()",
    "source_code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention#httpUrl(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 142
    },
    "return": "KeyValue",
    "signature": "protected KeyValue httpUrl(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue httpUrl(ServerRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, context.getCarrier().getRequestURI());\n\t\t}\n\t\treturn HTTP_URL_UNKNOWN;\n\t}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention#method(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 92
    },
    "return": "KeyValue",
    "signature": "protected KeyValue method(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue method(ServerRequestObservationContext context) {\n\t\treturn (context.getCarrier() != null) ? KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, context.getCarrier().getMethod()) : METHOD_UNKNOWN;\n\t}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention#outcome(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 134
    },
    "return": "KeyValue",
    "signature": "protected KeyValue outcome(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue outcome(ServerRequestObservationContext context) {\n\t\tif (context.getResponse() != null) {\n\t\t\tHttpStatusCode statusCode = HttpStatusCode.valueOf(context.getResponse().getStatus());\n\t\t\treturn HttpOutcome.forStatus(statusCode);\n\t\t}\n\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention#status(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 96
    },
    "return": "KeyValue",
    "signature": "protected KeyValue status(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue status(ServerRequestObservationContext context) {\n\t\treturn (context.getResponse() != null) ? KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, Integer.toString(context.getResponse().getStatus())) : STATUS_UNKNOWN;\n\t}"
  },
  "org.springframework.http.observation.DefaultServerRequestObservationConvention#uri(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 100
    },
    "return": "KeyValue",
    "signature": "protected KeyValue uri(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue uri(ServerRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\tString pattern = context.getPathPattern();\n\t\t\tif (pattern != null) {\n\t\t\t\tif (pattern.isEmpty()) {\n\t\t\t\t\treturn URI_ROOT;\n\t\t\t\t}\n\t\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, pattern);\n\t\t\t}\n\t\t\tif (context.getResponse() != null) {\n\t\t\t\tHttpStatus status = HttpStatus.resolve(context.getResponse().getStatus());\n\t\t\t\tif (status != null) {\n\t\t\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\t\t\treturn URI_REDIRECTION;\n\t\t\t\t\t}\n\t\t\t\t\tif (status == HttpStatus.NOT_FOUND) {\n\t\t\t\t\t\treturn URI_NOT_FOUND;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn URI_UNKNOWN;\n\t}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention": {
    "change": "added",
    "deprecated": false,
    "doc": "/**\n * Default {@link ServerRequestObservationConvention}.\n *\n * @author Brian Clozel\n * @since 6.0\n */",
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 33
    },
    "signature": "public class DefaultServerRequestObservationConvention",
    "source_code": "public class DefaultServerRequestObservationConvention implements ServerRequestObservationConvention {\n\n\tprivate static final String DEFAULT_NAME = \"http.server.requests\";\n\n\tprivate static final KeyValue METHOD_UNKNOWN = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, \"UNKNOWN\");\n\n\tprivate static final KeyValue STATUS_UNKNOWN = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, \"UNKNOWN\");\n\n\tprivate static final KeyValue HTTP_OUTCOME_SUCCESS = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, \"SUCCESS\");\n\n\tprivate static final KeyValue HTTP_OUTCOME_UNKNOWN = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, \"UNKNOWN\");\n\n\tprivate static final KeyValue URI_UNKNOWN = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, \"UNKNOWN\");\n\n\tprivate static final KeyValue URI_ROOT = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, \"root\");\n\n\tprivate static final KeyValue URI_NOT_FOUND = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, \"NOT_FOUND\");\n\n\tprivate static final KeyValue URI_REDIRECTION = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, \"REDIRECTION\");\n\n\tprivate static final KeyValue EXCEPTION_NONE = KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION, KeyValue.NONE_VALUE);\n\n\tprivate static final KeyValue HTTP_URL_UNKNOWN = KeyValue.of(ServerHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, \"UNKNOWN\");\n\n\tprivate final String name;\n\n\t/**\n\t * Create a convention with the default name {@code \"http.server.requests\"}.\n\t */\n\tpublic DefaultServerRequestObservationConvention() {\n\t\tthis(DEFAULT_NAME);\n\t}\n\n\t/**\n\t * Create a convention with a custom name.\n\t *\n\t * @param name the observation name\n\t */\n\tpublic DefaultServerRequestObservationConvention(String name) {\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\t@Override\n\tpublic String getContextualName(ServerRequestObservationContext context) {\n\t\treturn \"http \" + context.getCarrier().getMethod().name().toLowerCase();\n\t}\n\n\t@Override\n\tpublic KeyValues getLowCardinalityKeyValues(ServerRequestObservationContext context) {\n\t\treturn KeyValues.of(method(context), uri(context), status(context), exception(context), outcome(context));\n\t}\n\n\t@Override\n\tpublic KeyValues getHighCardinalityKeyValues(ServerRequestObservationContext context) {\n\t\treturn KeyValues.of(httpUrl(context));\n\t}\n\n\tprotected KeyValue method(ServerRequestObservationContext context) {\n\t\treturn (context.getCarrier() != null) ? KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, context.getCarrier().getMethod().name()) : METHOD_UNKNOWN;\n\t}\n\n\tprotected KeyValue status(ServerRequestObservationContext context) {\n\t\tif (context.isConnectionAborted()) {\n\t\t\treturn STATUS_UNKNOWN;\n\t\t}\n\t\treturn (context.getResponse() != null && context.getResponse().getStatusCode() != null) ?\n\t\t\t\tKeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, Integer.toString(context.getResponse().getStatusCode().value())) : STATUS_UNKNOWN;\n\t}\n\n\tprotected KeyValue uri(ServerRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\tPathPattern pattern = context.getPathPattern();\n\t\t\tif (pattern != null) {\n\t\t\t\tif (pattern.toString().isEmpty()) {\n\t\t\t\t\treturn URI_ROOT;\n\t\t\t\t}\n\t\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, pattern.toString());\n\t\t\t}\n\t\t\tif (context.getResponse() != null && context.getResponse().getStatusCode() != null) {\n\t\t\t\tHttpStatus status = HttpStatus.resolve(context.getResponse().getStatusCode().value());\n\t\t\t\tif (status != null) {\n\t\t\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\t\t\treturn URI_REDIRECTION;\n\t\t\t\t\t}\n\t\t\t\t\tif (status == HttpStatus.NOT_FOUND) {\n\t\t\t\t\t\treturn URI_NOT_FOUND;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn URI_UNKNOWN;\n\t}\n\n\tprotected KeyValue exception(ServerRequestObservationContext context) {\n\t\tThrowable error = context.getError();\n\t\tif (error != null) {\n\t\t\tString simpleName = error.getClass().getSimpleName();\n\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION,\n\t\t\t\t\tStringUtils.hasText(simpleName) ? simpleName : error.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}\n\n\tprotected KeyValue outcome(ServerRequestObservationContext context) {\n\t\tif (context.isConnectionAborted()) {\n\t\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t\t}\n\t\tif (context.getResponse() != null && context.getResponse().getStatusCode() != null) {\n\t\t\treturn HttpOutcome.forStatus(context.getResponse().getStatusCode());\n\t\t}\n\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t}\n\n\tprotected KeyValue httpUrl(ServerRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, context.getCarrier().getPath().toString());\n\t\t}\n\t\treturn HTTP_URL_UNKNOWN;\n\t}\n\n\tstatic class HttpOutcome {\n\n\t\tstatic KeyValue forStatus(HttpStatusCode statusCode) {\n\t\t\tif (statusCode.is2xxSuccessful()) {\n\t\t\t\treturn HTTP_OUTCOME_SUCCESS;\n\t\t\t}\n\t\t\telse if (statusCode instanceof HttpStatus status) {\n\t\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, status.series().name());\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t\t\t}\n\t\t}\n\n\t}\n\n}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention#exception(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 131
    },
    "return": "KeyValue",
    "signature": "protected KeyValue exception(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue exception(ServerRequestObservationContext context) {\n\t\tThrowable error = context.getError();\n\t\tif (error != null) {\n\t\t\tString simpleName = error.getClass().getSimpleName();\n\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION,\n\t\t\t\t\tStringUtils.hasText(simpleName) ? simpleName : error.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention#getContextualName(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 81
    },
    "return": "String",
    "signature": "public String getContextualName(ServerRequestObservationContext context)",
    "source_code": "\tpublic String getContextualName(ServerRequestObservationContext context) {\n\t\treturn \"http \" + context.getCarrier().getMethod().name().toLowerCase();\n\t}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention#getHighCardinalityKeyValues(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 91
    },
    "return": "KeyValues",
    "signature": "public KeyValues getHighCardinalityKeyValues(ServerRequestObservationContext context)",
    "source_code": "\tpublic KeyValues getHighCardinalityKeyValues(ServerRequestObservationContext context) {\n\t\treturn KeyValues.of(httpUrl(context));\n\t}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention#getLowCardinalityKeyValues(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 86
    },
    "return": "KeyValues",
    "signature": "public KeyValues getLowCardinalityKeyValues(ServerRequestObservationContext context)",
    "source_code": "\tpublic KeyValues getLowCardinalityKeyValues(ServerRequestObservationContext context) {\n\t\treturn KeyValues.of(method(context), uri(context), status(context), exception(context), outcome(context));\n\t}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention#getName()": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 76
    },
    "return": "String",
    "signature": "public String getName()",
    "source_code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention#httpUrl(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 151
    },
    "return": "KeyValue",
    "signature": "protected KeyValue httpUrl(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue httpUrl(ServerRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, context.getCarrier().getPath().toString());\n\t\t}\n\t\treturn HTTP_URL_UNKNOWN;\n\t}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention#method(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 95
    },
    "return": "KeyValue",
    "signature": "protected KeyValue method(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue method(ServerRequestObservationContext context) {\n\t\treturn (context.getCarrier() != null) ? KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, context.getCarrier().getMethod().name()) : METHOD_UNKNOWN;\n\t}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention#outcome(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 141
    },
    "return": "KeyValue",
    "signature": "protected KeyValue outcome(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue outcome(ServerRequestObservationContext context) {\n\t\tif (context.isConnectionAborted()) {\n\t\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t\t}\n\t\tif (context.getResponse() != null && context.getResponse().getStatusCode() != null) {\n\t\t\treturn HttpOutcome.forStatus(context.getResponse().getStatusCode());\n\t\t}\n\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention#status(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 99
    },
    "return": "KeyValue",
    "signature": "protected KeyValue status(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue status(ServerRequestObservationContext context) {\n\t\tif (context.isConnectionAborted()) {\n\t\t\treturn STATUS_UNKNOWN;\n\t\t}\n\t\treturn (context.getResponse() != null && context.getResponse().getStatusCode() != null) ?\n\t\t\t\tKeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, Integer.toString(context.getResponse().getStatusCode().value())) : STATUS_UNKNOWN;\n\t}"
  },
  "org.springframework.http.observation.reactive.DefaultServerRequestObservationConvention#uri(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 107
    },
    "return": "KeyValue",
    "signature": "protected KeyValue uri(ServerRequestObservationContext context)",
    "source_code": "\tprotected KeyValue uri(ServerRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\tPathPattern pattern = context.getPathPattern();\n\t\t\tif (pattern != null) {\n\t\t\t\tif (pattern.toString().isEmpty()) {\n\t\t\t\t\treturn URI_ROOT;\n\t\t\t\t}\n\t\t\t\treturn KeyValue.of(ServerHttpObservationDocumentation.LowCardinalityKeyNames.URI, pattern.toString());\n\t\t\t}\n\t\t\tif (context.getResponse() != null && context.getResponse().getStatusCode() != null) {\n\t\t\t\tHttpStatus status = HttpStatus.resolve(context.getResponse().getStatusCode().value());\n\t\t\t\tif (status != null) {\n\t\t\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\t\t\treturn URI_REDIRECTION;\n\t\t\t\t\t}\n\t\t\t\t\tif (status == HttpStatus.NOT_FOUND) {\n\t\t\t\t\t\treturn URI_NOT_FOUND;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn URI_UNKNOWN;\n\t}"
  },
  "org.springframework.http.server.ServletServerHttpRequest#getMethodValue()": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 99
    },
    "return": "String",
    "signature": "public String getMethodValue()",
    "source_code": "\tpublic String getMethodValue() {\n\t\treturn this.servletRequest.getMethod();\n\t}"
  },
  "org.springframework.http.server.reactive.<unknown>#getMethodValue()": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 147
    },
    "return": "String",
    "signature": "public String getMethodValue()",
    "source_code": "\tpublic String getMethodValue() {\n\t\treturn this.request.method().name();\n\t}"
  },
  "org.springframework.messaging.rsocket.service.Builder": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Builder to create an {@link RSocketServiceProxyFactory}.\n\t */",
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 199
    },
    "signature": "public class Builder",
    "source_code": "\tpublic static final class Builder {\n\n\t\t@Nullable\n\t\tprivate RSocketRequester rsocketRequester;\n\n\t\tprivate final List<RSocketServiceArgumentResolver> customArgumentResolvers = new ArrayList<>();\n\n\t\t@Nullable\n\t\tprivate StringValueResolver embeddedValueResolver;\n\n\t\tprivate ReactiveAdapterRegistry reactiveAdapterRegistry = ReactiveAdapterRegistry.getSharedInstance();\n\n\t\t@Nullable\n\t\tprivate Duration blockTimeout = Duration.ofSeconds(5);\n\n\t\tprivate Builder() {\n\t\t}\n\n\t\t/**\n\t\t * Provide the requester to perform requests through.\n\t\t * @param requester the requester to use\n\t\t * @return the same builder instance\n\t\t */\n\t\tpublic Builder rsocketRequester(RSocketRequester requester) {\n\t\t\tthis.rsocketRequester = requester;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Register a custom argument resolver, invoked ahead of default resolvers.\n\t\t * @param resolver the resolver to add\n\t\t * @return the same builder instance\n\t\t */\n\t\tpublic Builder customArgumentResolver(RSocketServiceArgumentResolver resolver) {\n\t\t\tthis.customArgumentResolvers.add(resolver);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Set the {@link StringValueResolver} to use for resolving placeholders\n\t\t * and expressions embedded in {@link RSocketExchange#value()}.\n\t\t * @param resolver the resolver to use\n\t\t * @return this same builder instance\n\t\t */\n\t\tpublic Builder embeddedValueResolver(StringValueResolver resolver) {\n\t\t\tthis.embeddedValueResolver = resolver;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Set the {@link ReactiveAdapterRegistry} to use to support different\n\t\t * asynchronous types for HTTP service method return values.\n\t\t * <p>By default this is {@link ReactiveAdapterRegistry#getSharedInstance()}.\n\t\t * @return this same builder instance\n\t\t */\n\t\tpublic Builder reactiveAdapterRegistry(ReactiveAdapterRegistry registry) {\n\t\t\tthis.reactiveAdapterRegistry = registry;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Configure how long to wait for a response for an HTTP service method\n\t\t * with a synchronous (blocking) method signature.\n\t\t * <p>By default this is 5 seconds.\n\t\t * @param blockTimeout the timeout value\n\t\t * @return this same builder instance\n\t\t */\n\t\tpublic Builder blockTimeout(Duration blockTimeout) {\n\t\t\tthis.blockTimeout = blockTimeout;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Build the {@link RSocketServiceProxyFactory} instance.\n\t\t */\n\t\tpublic RSocketServiceProxyFactory build() {\n\t\t\tAssert.notNull(this.rsocketRequester, \"RSocketRequester is required\");\n\n\t\t\treturn new RSocketServiceProxyFactory(\n\t\t\t\t\tthis.rsocketRequester, initArgumentResolvers(),\n\t\t\t\t\tthis.embeddedValueResolver, this.reactiveAdapterRegistry,\n\t\t\t\t\t(this.blockTimeout != null ? this.blockTimeout : Duration.ofSeconds(5)));\n\t\t}\n\n\t\tprivate List<RSocketServiceArgumentResolver> initArgumentResolvers() {\n\n\t\t\t// Custom\n\t\t\tList<RSocketServiceArgumentResolver> resolvers = new ArrayList<>(this.customArgumentResolvers);\n\n\t\t\t// Annotation-based\n\t\t\tresolvers.add(new PayloadArgumentResolver(this.reactiveAdapterRegistry, false));\n\t\t\tresolvers.add(new DestinationVariableArgumentResolver());\n\n\t\t\t// Type-based\n\t\t\tresolvers.add(new MetadataArgumentResolver());\n\n\t\t\t// Fallback\n\t\t\tresolvers.add(new PayloadArgumentResolver(this.reactiveAdapterRegistry, true));\n\n\t\t\treturn resolvers;\n\t\t}\n\t}"
  },
  "org.springframework.messaging.rsocket.service.RSocketServiceProxyFactory#blockTimeout(blockTimeout)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Configure how long to wait for a response for an HTTP service method\n\t\t * with a synchronous (blocking) method signature.\n\t\t * <p>By default this is 5 seconds.\n\t\t * @param blockTimeout the timeout value\n\t\t * @return this same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "blockTimeout"
    ],
    "position": {
      "column": 1,
      "line": 266
    },
    "return": "Builder",
    "signature": "public Builder blockTimeout(Duration blockTimeout)",
    "source_code": "\t\tpublic Builder blockTimeout(Duration blockTimeout) {\n\t\t\tthis.blockTimeout = blockTimeout;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.messaging.rsocket.service.RSocketServiceProxyFactory#build()": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Build the {@link RSocketServiceProxyFactory} instance.\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 274
    },
    "return": "RSocketServiceProxyFactory",
    "signature": "public RSocketServiceProxyFactory build()",
    "source_code": "\t\tpublic RSocketServiceProxyFactory build() {\n\t\t\tAssert.notNull(this.rsocketRequester, \"RSocketRequester is required\");\n\n\t\t\treturn new RSocketServiceProxyFactory(\n\t\t\t\t\tthis.rsocketRequester, initArgumentResolvers(),\n\t\t\t\t\tthis.embeddedValueResolver, this.reactiveAdapterRegistry,\n\t\t\t\t\t(this.blockTimeout != null ? this.blockTimeout : Duration.ofSeconds(5)));\n\t\t}"
  },
  "org.springframework.messaging.rsocket.service.RSocketServiceProxyFactory#builder()": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Return an {@link RSocketServiceProxyFactory} builder.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 191
    },
    "return": "Builder",
    "signature": "public Builder builder()",
    "source_code": "\tpublic static Builder builder() {\n\t\treturn new Builder();\n\t}"
  },
  "org.springframework.messaging.rsocket.service.RSocketServiceProxyFactory#builder(requester)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Return an {@link RSocketServiceProxyFactory} builder, initialized with the\n\t * given client.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "requester"
    ],
    "position": {
      "column": 1,
      "line": 184
    },
    "return": "Builder",
    "signature": "public Builder builder(RSocketRequester requester)",
    "source_code": "\tpublic static Builder builder(RSocketRequester requester) {\n\t\treturn new Builder().rsocketRequester(requester);\n\t}"
  },
  "org.springframework.messaging.rsocket.service.RSocketServiceProxyFactory#customArgumentResolver(resolver)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Register a custom argument resolver, invoked ahead of default resolvers.\n\t\t * @param resolver the resolver to add\n\t\t * @return the same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "resolver"
    ],
    "position": {
      "column": 1,
      "line": 232
    },
    "return": "Builder",
    "signature": "public Builder customArgumentResolver(RSocketServiceArgumentResolver resolver)",
    "source_code": "\t\tpublic Builder customArgumentResolver(RSocketServiceArgumentResolver resolver) {\n\t\t\tthis.customArgumentResolvers.add(resolver);\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.messaging.rsocket.service.RSocketServiceProxyFactory#embeddedValueResolver(resolver)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Set the {@link StringValueResolver} to use for resolving placeholders\n\t\t * and expressions embedded in {@link RSocketExchange#value()}.\n\t\t * @param resolver the resolver to use\n\t\t * @return this same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "resolver"
    ],
    "position": {
      "column": 1,
      "line": 243
    },
    "return": "Builder",
    "signature": "public Builder embeddedValueResolver(StringValueResolver resolver)",
    "source_code": "\t\tpublic Builder embeddedValueResolver(StringValueResolver resolver) {\n\t\t\tthis.embeddedValueResolver = resolver;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.messaging.rsocket.service.RSocketServiceProxyFactory#reactiveAdapterRegistry(registry)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Set the {@link ReactiveAdapterRegistry} to use to support different\n\t\t * asynchronous types for HTTP service method return values.\n\t\t * <p>By default this is {@link ReactiveAdapterRegistry#getSharedInstance()}.\n\t\t * @return this same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "registry"
    ],
    "position": {
      "column": 1,
      "line": 254
    },
    "return": "Builder",
    "signature": "public Builder reactiveAdapterRegistry(ReactiveAdapterRegistry registry)",
    "source_code": "\t\tpublic Builder reactiveAdapterRegistry(ReactiveAdapterRegistry registry) {\n\t\t\tthis.reactiveAdapterRegistry = registry;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.messaging.rsocket.service.RSocketServiceProxyFactory#rsocketRequester(requester)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Provide the requester to perform requests through.\n\t\t * @param requester the requester to use\n\t\t * @return the same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "requester"
    ],
    "position": {
      "column": 1,
      "line": 222
    },
    "return": "Builder",
    "signature": "public Builder rsocketRequester(RSocketRequester requester)",
    "source_code": "\t\tpublic Builder rsocketRequester(RSocketRequester requester) {\n\t\t\tthis.rsocketRequester = requester;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.mock.http.client.reactive.MockClientHttpResponse#getRawStatusCode()": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 76
    },
    "return": "int",
    "signature": "public int getRawStatusCode()",
    "source_code": "\tpublic int getRawStatusCode() {\n\t\treturn this.statusCode.value();\n\t}"
  },
  "org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate#setContextFailureProcessor(contextFailureProcessor)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "contextFailureProcessor"
    ],
    "position": {
      "column": 1,
      "line": 158
    },
    "return": "void",
    "signature": "public void setContextFailureProcessor(ApplicationContextFailureProcessor contextFailureProcessor)",
    "source_code": "\tpublic void setContextFailureProcessor(ApplicationContextFailureProcessor contextFailureProcessor) {\n\t\tthis.contextFailureProcessor = contextFailureProcessor;\n\t}"
  },
  "org.springframework.test.context.support.AbstractTestContextBootstrapper#getApplicationContextFailureProcessor()": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Get the {@link ApplicationContextFailureProcessor} to use.\n\t * <p>The default implementation returns {@code null}.\n\t * <p>Concrete subclasses may choose to override this method to provide an\n\t * {@code ApplicationContextFailureProcessor} that will be supplied to the\n\t * configured {@code CacheAwareContextLoaderDelegate} in\n\t * {@link #getCacheAwareContextLoaderDelegate()}.\n\t * @return the context failure processor to use, or {@code null} if no processor\n\t * should be used\n\t * @since 6.0\n\t * @see #getCacheAwareContextLoaderDelegate()\n\t */",
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 530
    },
    "return": "ApplicationContextFailureProcessor",
    "signature": "protected ApplicationContextFailureProcessor getApplicationContextFailureProcessor()",
    "source_code": "\tprotected ApplicationContextFailureProcessor getApplicationContextFailureProcessor() {\n\t\treturn null;\n\t}"
  },
  "org.springframework.web.client.RestTemplate#createResourceAccessException(url,method,ex)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "url",
      "method",
      "ex"
    ],
    "position": {
      "column": 1,
      "line": 887
    },
    "return": "ResourceAccessException",
    "signature": "protected ResourceAccessException createResourceAccessException(URI url, HttpMethod method, IOException ex)",
    "source_code": "\tprotected static ResourceAccessException createResourceAccessException(URI url, HttpMethod method, IOException ex) {\n\t\tString resource = url.toString();\n\t\tString query = url.getRawQuery();\n\t\tresource = (query != null ? resource.substring(0, resource.indexOf('?')) : resource);\n\t\tResourceAccessException exception = new ResourceAccessException(\"I/O error on \" + method.name() +\n\t\t\t\t\" request for \\\"\" + resource + \"\\\": \" + ex.getMessage(), ex);\n\t\treturn exception;\n\t}"
  },
  "org.springframework.web.reactive.function.client.<unknown>#getMethodValue()": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 61
    },
    "return": "String",
    "signature": "public String getMethodValue()",
    "source_code": "\t\tpublic String getMethodValue() {\n\t\t\treturn \"UNKNOWN\";\n\t\t}"
  },
  "org.springframework.web.reactive.function.client.<unknown>#getRawStatusCode()": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 266
    },
    "return": "int",
    "signature": "public int getRawStatusCode()",
    "source_code": "\t\tpublic int getRawStatusCode() {\n\t\t\treturn this.statusCode.value();\n\t\t}"
  },
  "org.springframework.web.reactive.function.client.<unknown>#rawStatusCode()": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 123
    },
    "return": "int",
    "signature": "public int rawStatusCode()",
    "source_code": "\tpublic int rawStatusCode() {\n\t\treturn this.response.getRawStatusCode();\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention": {
    "change": "added",
    "deprecated": false,
    "doc": "/**\n * Default implementation for a {@link ClientRequestObservationConvention},\n * extracting information from the {@link ClientRequestObservationContext}.\n *\n * @author Brian Clozel\n * @since 6.0\n */",
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 35
    },
    "signature": "public class DefaultClientRequestObservationConvention",
    "source_code": "public class DefaultClientRequestObservationConvention implements ClientRequestObservationConvention {\n\n\tprivate static final String DEFAULT_NAME = \"http.client.requests\";\n\n\tprivate static final KeyValue URI_NONE = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.URI, KeyValue.NONE_VALUE);\n\n\tprivate static final KeyValue METHOD_NONE = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, KeyValue.NONE_VALUE);\n\n\tprivate static final KeyValue STATUS_IO_ERROR = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, \"IO_ERROR\");\n\n\tprivate static final KeyValue STATUS_CLIENT_ERROR = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, \"CLIENT_ERROR\");\n\n\tprivate static final KeyValue HTTP_OUTCOME_SUCCESS = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, \"SUCCESS\");\n\n\tprivate static final KeyValue HTTP_OUTCOME_UNKNOWN = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, \"UNKNOWN\");\n\n\tprivate static final KeyValue EXCEPTION_NONE = KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION, KeyValue.NONE_VALUE);\n\n\tprivate static final KeyValue HTTP_URL_NONE = KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, KeyValue.NONE_VALUE);\n\n\tprivate static final KeyValue CLIENT_NAME_NONE = KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.CLIENT_NAME, KeyValue.NONE_VALUE);\n\n\tprivate final String name;\n\n\n\t/**\n\t * Create a convention with the default name {@code \"http.client.requests\"}.\n\t */\n\tpublic DefaultClientRequestObservationConvention() {\n\t\tthis(DEFAULT_NAME);\n\t}\n\n\t/**\n\t * Create a convention with a custom name.\n\t * @param name the observation name\n\t */\n\tpublic DefaultClientRequestObservationConvention(String name) {\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\t@Override\n\tpublic String getContextualName(ClientRequestObservationContext context) {\n\t\treturn \"http \" + context.getCarrier().method().name().toLowerCase();\n\t}\n\n\t@Override\n\tpublic KeyValues getLowCardinalityKeyValues(ClientRequestObservationContext context) {\n\t\treturn KeyValues.of(uri(context), method(context), status(context), exception(context), outcome(context));\n\t}\n\n\tprotected KeyValue uri(ClientRequestObservationContext context) {\n\t\tif (context.getUriTemplate() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.URI, context.getUriTemplate());\n\t\t}\n\t\treturn URI_NONE;\n\t}\n\n\tprotected KeyValue method(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, context.getCarrier().method().name());\n\t\t}\n\t\telse {\n\t\t\treturn METHOD_NONE;\n\t\t}\n\t}\n\n\tprotected KeyValue status(ClientRequestObservationContext context) {\n\t\tif (context.isAborted()) {\n\t\t\treturn STATUS_CLIENT_ERROR;\n\t\t}\n\t\tClientResponse response = context.getResponse();\n\t\tif (response != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, String.valueOf(response.statusCode().value()));\n\t\t}\n\t\tif (context.getError() != null && context.getError() instanceof IOException) {\n\t\t\treturn STATUS_IO_ERROR;\n\t\t}\n\t\treturn STATUS_CLIENT_ERROR;\n\t}\n\n\tprotected KeyValue exception(ClientRequestObservationContext context) {\n\t\tThrowable error = context.getError();\n\t\tif (error != null) {\n\t\t\tString simpleName = error.getClass().getSimpleName();\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION,\n\t\t\t\t\tStringUtils.hasText(simpleName) ? simpleName : error.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}\n\n\tprotected KeyValue outcome(ClientRequestObservationContext context) {\n\t\tif (context.isAborted()) {\n\t\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t\t}\n\t\tif (context.getResponse() != null) {\n\t\t\treturn HttpOutcome.forStatus(context.getResponse().statusCode());\n\t\t}\n\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t}\n\n\t@Override\n\tpublic KeyValues getHighCardinalityKeyValues(ClientRequestObservationContext context) {\n\t\treturn KeyValues.of(httpUrl(context), clientName(context));\n\t}\n\n\tprotected KeyValue httpUrl(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, context.getCarrier().url().toASCIIString());\n\t\t}\n\t\treturn HTTP_URL_NONE;\n\t}\n\n\tprotected KeyValue clientName(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null && context.getCarrier().url().getHost() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.CLIENT_NAME, context.getCarrier().url().getHost());\n\t\t}\n\t\treturn CLIENT_NAME_NONE;\n\t}\n\n\tstatic class HttpOutcome {\n\n\t\tstatic KeyValue forStatus(HttpStatusCode statusCode) {\n\t\t\tif (statusCode.is2xxSuccessful()) {\n\t\t\t\treturn HTTP_OUTCOME_SUCCESS;\n\t\t\t}\n\t\t\telse if (statusCode instanceof HttpStatus status) {\n\t\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.OUTCOME, status.series().name());\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t\t\t}\n\t\t}\n\n\t}\n\n}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#clientName(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 152
    },
    "return": "KeyValue",
    "signature": "protected KeyValue clientName(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue clientName(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null && context.getCarrier().url().getHost() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.CLIENT_NAME, context.getCarrier().url().getHost());\n\t\t}\n\t\treturn CLIENT_NAME_NONE;\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#exception(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 120
    },
    "return": "KeyValue",
    "signature": "protected KeyValue exception(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue exception(ClientRequestObservationContext context) {\n\t\tThrowable error = context.getError();\n\t\tif (error != null) {\n\t\t\tString simpleName = error.getClass().getSimpleName();\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.EXCEPTION,\n\t\t\t\t\tStringUtils.hasText(simpleName) ? simpleName : error.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#getContextualName(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 81
    },
    "return": "String",
    "signature": "public String getContextualName(ClientRequestObservationContext context)",
    "source_code": "\tpublic String getContextualName(ClientRequestObservationContext context) {\n\t\treturn \"http \" + context.getCarrier().method().name().toLowerCase();\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#getHighCardinalityKeyValues(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 141
    },
    "return": "KeyValues",
    "signature": "public KeyValues getHighCardinalityKeyValues(ClientRequestObservationContext context)",
    "source_code": "\tpublic KeyValues getHighCardinalityKeyValues(ClientRequestObservationContext context) {\n\t\treturn KeyValues.of(httpUrl(context), clientName(context));\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#getLowCardinalityKeyValues(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 86
    },
    "return": "KeyValues",
    "signature": "public KeyValues getLowCardinalityKeyValues(ClientRequestObservationContext context)",
    "source_code": "\tpublic KeyValues getLowCardinalityKeyValues(ClientRequestObservationContext context) {\n\t\treturn KeyValues.of(uri(context), method(context), status(context), exception(context), outcome(context));\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#getName()": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 76
    },
    "return": "String",
    "signature": "public String getName()",
    "source_code": "\tpublic String getName() {\n\t\treturn this.name;\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#httpUrl(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 145
    },
    "return": "KeyValue",
    "signature": "protected KeyValue httpUrl(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue httpUrl(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.HighCardinalityKeyNames.HTTP_URL, context.getCarrier().url().toASCIIString());\n\t\t}\n\t\treturn HTTP_URL_NONE;\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#method(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 97
    },
    "return": "KeyValue",
    "signature": "protected KeyValue method(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue method(ClientRequestObservationContext context) {\n\t\tif (context.getCarrier() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.METHOD, context.getCarrier().method().name());\n\t\t}\n\t\telse {\n\t\t\treturn METHOD_NONE;\n\t\t}\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#outcome(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 130
    },
    "return": "KeyValue",
    "signature": "protected KeyValue outcome(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue outcome(ClientRequestObservationContext context) {\n\t\tif (context.isAborted()) {\n\t\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t\t}\n\t\tif (context.getResponse() != null) {\n\t\t\treturn HttpOutcome.forStatus(context.getResponse().statusCode());\n\t\t}\n\t\treturn HTTP_OUTCOME_UNKNOWN;\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#status(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 106
    },
    "return": "KeyValue",
    "signature": "protected KeyValue status(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue status(ClientRequestObservationContext context) {\n\t\tif (context.isAborted()) {\n\t\t\treturn STATUS_CLIENT_ERROR;\n\t\t}\n\t\tClientResponse response = context.getResponse();\n\t\tif (response != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.STATUS, String.valueOf(response.statusCode().value()));\n\t\t}\n\t\tif (context.getError() != null && context.getError() instanceof IOException) {\n\t\t\treturn STATUS_IO_ERROR;\n\t\t}\n\t\treturn STATUS_CLIENT_ERROR;\n\t}"
  },
  "org.springframework.web.reactive.function.client.DefaultClientRequestObservationConvention#uri(context)": {
    "change": "added",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "context"
    ],
    "position": {
      "column": 1,
      "line": 90
    },
    "return": "KeyValue",
    "signature": "protected KeyValue uri(ClientRequestObservationContext context)",
    "source_code": "\tprotected KeyValue uri(ClientRequestObservationContext context) {\n\t\tif (context.getUriTemplate() != null) {\n\t\t\treturn KeyValue.of(ClientHttpObservationDocumentation.LowCardinalityKeyNames.URI, context.getUriTemplate());\n\t\t}\n\t\treturn URI_NONE;\n\t}"
  },
  "org.springframework.web.reactive.function.server.<unknown>#build()": {
    "change": "signature_changed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 198
    },
    "return": "Mono<ServerResponse>",
    "signature": "public Mono<ServerResponse> build()",
    "source_code": "\tpublic Mono<ServerResponse> build() {\n\t\treturn build((exchange, handlerStrategies) -> exchange.getResponse().setComplete());\n\t}"
  },
  "org.springframework.web.service.invoker.Builder": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Builder to create an {@link HttpServiceProxyFactory}.\n\t */",
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 214
    },
    "signature": "public class Builder",
    "source_code": "\tpublic static final class Builder {\n\n\t\t@Nullable\n\t\tprivate HttpClientAdapter clientAdapter;\n\n\t\tprivate final List<HttpServiceArgumentResolver> customArgumentResolvers = new ArrayList<>();\n\n\t\t@Nullable\n\t\tprivate ConversionService conversionService;\n\n\t\t@Nullable\n\t\tprivate StringValueResolver embeddedValueResolver;\n\n\t\tprivate ReactiveAdapterRegistry reactiveAdapterRegistry = ReactiveAdapterRegistry.getSharedInstance();\n\n\t\t@Nullable\n\t\tprivate Duration blockTimeout;\n\n\t\tprivate Builder() {\n\t\t}\n\n\t\t/**\n\t\t * Provide the HTTP client to perform requests through.\n\t\t * @param clientAdapter a client adapted to {@link HttpClientAdapter}\n\t\t * @return this same builder instance\n\t\t */\n\t\tpublic Builder clientAdapter(HttpClientAdapter clientAdapter) {\n\t\t\tthis.clientAdapter = clientAdapter;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Register a custom argument resolver, invoked ahead of default resolvers.\n\t\t * @param resolver the resolver to add\n\t\t * @return this same builder instance\n\t\t */\n\t\tpublic Builder customArgumentResolver(HttpServiceArgumentResolver resolver) {\n\t\t\tthis.customArgumentResolvers.add(resolver);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Set the {@link ConversionService} to use where input values need to\n\t\t * be formatted as Strings.\n\t\t * <p>By default this is {@link DefaultFormattingConversionService}.\n\t\t * @return this same builder instance\n\t\t */\n\t\tpublic Builder conversionService(ConversionService conversionService) {\n\t\t\tthis.conversionService = conversionService;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Set the {@link StringValueResolver} to use for resolving placeholders\n\t\t * and expressions embedded in {@link HttpExchange#url()}.\n\t\t * @param embeddedValueResolver the resolver to use\n\t\t * @return this same builder instance\n\t\t */\n\t\tpublic Builder embeddedValueResolver(StringValueResolver embeddedValueResolver) {\n\t\t\tthis.embeddedValueResolver = embeddedValueResolver;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Set the {@link ReactiveAdapterRegistry} to use to support different\n\t\t * asynchronous types for HTTP service method return values.\n\t\t * <p>By default this is {@link ReactiveAdapterRegistry#getSharedInstance()}.\n\t\t * @return this same builder instance\n\t\t */\n\t\tpublic Builder reactiveAdapterRegistry(ReactiveAdapterRegistry registry) {\n\t\t\tthis.reactiveAdapterRegistry = registry;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Configure how long to wait for a response for an HTTP service method\n\t\t * with a synchronous (blocking) method signature.\n\t\t * <p>By default this is 5 seconds.\n\t\t * @param blockTimeout the timeout value\n\t\t * @return this same builder instance\n\t\t */\n\t\tpublic Builder blockTimeout(Duration blockTimeout) {\n\t\t\tthis.blockTimeout = blockTimeout;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Build the {@link HttpServiceProxyFactory} instance.\n\t\t */\n\t\tpublic HttpServiceProxyFactory build() {\n\t\t\tAssert.notNull(this.clientAdapter, \"HttpClientAdapter is required\");\n\n\t\t\treturn new HttpServiceProxyFactory(\n\t\t\t\t\tthis.clientAdapter, initArgumentResolvers(),\n\t\t\t\t\tthis.embeddedValueResolver, this.reactiveAdapterRegistry,\n\t\t\t\t\t(this.blockTimeout != null ? this.blockTimeout : Duration.ofSeconds(5)));\n\t\t}\n\n\t\tprivate List<HttpServiceArgumentResolver> initArgumentResolvers() {\n\n\t\t\t// Custom\n\t\t\tList<HttpServiceArgumentResolver> resolvers = new ArrayList<>(this.customArgumentResolvers);\n\n\t\t\tConversionService service = (this.conversionService != null ?\n\t\t\t\t\tthis.conversionService : new DefaultFormattingConversionService());\n\n\t\t\t// Annotation-based\n\t\t\tresolvers.add(new RequestHeaderArgumentResolver(service));\n\t\t\tresolvers.add(new RequestBodyArgumentResolver(this.reactiveAdapterRegistry));\n\t\t\tresolvers.add(new PathVariableArgumentResolver(service));\n\t\t\tresolvers.add(new RequestParamArgumentResolver(service));\n\t\t\tresolvers.add(new CookieValueArgumentResolver(service));\n\t\t\tresolvers.add(new RequestAttributeArgumentResolver());\n\n\t\t\t// Specific type\n\t\t\tresolvers.add(new UrlArgumentResolver());\n\t\t\tresolvers.add(new HttpMethodArgumentResolver());\n\n\t\t\treturn resolvers;\n\t\t}\n\t}"
  },
  "org.springframework.web.service.invoker.HttpServiceProxyFactory#blockTimeout(blockTimeout)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Configure how long to wait for a response for an HTTP service method\n\t\t * with a synchronous (blocking) method signature.\n\t\t * <p>By default this is 5 seconds.\n\t\t * @param blockTimeout the timeout value\n\t\t * @return this same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "blockTimeout"
    ],
    "position": {
      "column": 1,
      "line": 295
    },
    "return": "Builder",
    "signature": "public Builder blockTimeout(Duration blockTimeout)",
    "source_code": "\t\tpublic Builder blockTimeout(Duration blockTimeout) {\n\t\t\tthis.blockTimeout = blockTimeout;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.web.service.invoker.HttpServiceProxyFactory#build()": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Build the {@link HttpServiceProxyFactory} instance.\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 303
    },
    "return": "HttpServiceProxyFactory",
    "signature": "public HttpServiceProxyFactory build()",
    "source_code": "\t\tpublic HttpServiceProxyFactory build() {\n\t\t\tAssert.notNull(this.clientAdapter, \"HttpClientAdapter is required\");\n\n\t\t\treturn new HttpServiceProxyFactory(\n\t\t\t\t\tthis.clientAdapter, initArgumentResolvers(),\n\t\t\t\t\tthis.embeddedValueResolver, this.reactiveAdapterRegistry,\n\t\t\t\t\t(this.blockTimeout != null ? this.blockTimeout : Duration.ofSeconds(5)));\n\t\t}"
  },
  "org.springframework.web.service.invoker.HttpServiceProxyFactory#builder()": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Return an {@link HttpServiceProxyFactory} builder.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 206
    },
    "return": "Builder",
    "signature": "public Builder builder()",
    "source_code": "\tpublic static Builder builder() {\n\t\treturn new Builder();\n\t}"
  },
  "org.springframework.web.service.invoker.HttpServiceProxyFactory#builder(clientAdapter)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Return an {@link HttpServiceProxyFactory} builder, initialized with the\n\t * given client.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "clientAdapter"
    ],
    "position": {
      "column": 1,
      "line": 199
    },
    "return": "Builder",
    "signature": "public Builder builder(HttpClientAdapter clientAdapter)",
    "source_code": "\tpublic static Builder builder(HttpClientAdapter clientAdapter) {\n\t\treturn new Builder().clientAdapter(clientAdapter);\n\t}"
  },
  "org.springframework.web.service.invoker.HttpServiceProxyFactory#clientAdapter(clientAdapter)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Provide the HTTP client to perform requests through.\n\t\t * @param clientAdapter a client adapted to {@link HttpClientAdapter}\n\t\t * @return this same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "clientAdapter"
    ],
    "position": {
      "column": 1,
      "line": 240
    },
    "return": "Builder",
    "signature": "public Builder clientAdapter(HttpClientAdapter clientAdapter)",
    "source_code": "\t\tpublic Builder clientAdapter(HttpClientAdapter clientAdapter) {\n\t\t\tthis.clientAdapter = clientAdapter;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.web.service.invoker.HttpServiceProxyFactory#conversionService(conversionService)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Set the {@link ConversionService} to use where input values need to\n\t\t * be formatted as Strings.\n\t\t * <p>By default this is {@link DefaultFormattingConversionService}.\n\t\t * @return this same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "conversionService"
    ],
    "position": {
      "column": 1,
      "line": 261
    },
    "return": "Builder",
    "signature": "public Builder conversionService(ConversionService conversionService)",
    "source_code": "\t\tpublic Builder conversionService(ConversionService conversionService) {\n\t\t\tthis.conversionService = conversionService;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.web.service.invoker.HttpServiceProxyFactory#customArgumentResolver(resolver)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Register a custom argument resolver, invoked ahead of default resolvers.\n\t\t * @param resolver the resolver to add\n\t\t * @return this same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "resolver"
    ],
    "position": {
      "column": 1,
      "line": 250
    },
    "return": "Builder",
    "signature": "public Builder customArgumentResolver(HttpServiceArgumentResolver resolver)",
    "source_code": "\t\tpublic Builder customArgumentResolver(HttpServiceArgumentResolver resolver) {\n\t\t\tthis.customArgumentResolvers.add(resolver);\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.web.service.invoker.HttpServiceProxyFactory#embeddedValueResolver(embeddedValueResolver)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Set the {@link StringValueResolver} to use for resolving placeholders\n\t\t * and expressions embedded in {@link HttpExchange#url()}.\n\t\t * @param embeddedValueResolver the resolver to use\n\t\t * @return this same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "embeddedValueResolver"
    ],
    "position": {
      "column": 1,
      "line": 272
    },
    "return": "Builder",
    "signature": "public Builder embeddedValueResolver(StringValueResolver embeddedValueResolver)",
    "source_code": "\t\tpublic Builder embeddedValueResolver(StringValueResolver embeddedValueResolver) {\n\t\t\tthis.embeddedValueResolver = embeddedValueResolver;\n\t\t\treturn this;\n\t\t}"
  },
  "org.springframework.web.service.invoker.HttpServiceProxyFactory#reactiveAdapterRegistry(registry)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t\t/**\n\t\t * Set the {@link ReactiveAdapterRegistry} to use to support different\n\t\t * asynchronous types for HTTP service method return values.\n\t\t * <p>By default this is {@link ReactiveAdapterRegistry#getSharedInstance()}.\n\t\t * @return this same builder instance\n\t\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "registry"
    ],
    "position": {
      "column": 1,
      "line": 283
    },
    "return": "Builder",
    "signature": "public Builder reactiveAdapterRegistry(ReactiveAdapterRegistry registry)",
    "source_code": "\t\tpublic Builder reactiveAdapterRegistry(ReactiveAdapterRegistry registry) {\n\t\t\tthis.reactiveAdapterRegistry = registry;\n\t\t\treturn this;\n\t\t}"
  }
}