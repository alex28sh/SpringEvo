{
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#registerMessagingAdvice(bean)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * Use this method to register a {@link MessagingAdviceBean} that may contain\n\t * globally applicable\n\t * {@link org.springframework.messaging.handler.annotation.MessageExceptionHandler @MessageExceptionHandler}\n\t * methods.\n\t * <p>Note: spring-messaging does not depend on spring-web and therefore it\n\t * is not possible to explicitly support the registration of a\n\t * {@code @ControllerAdvice} bean. You can use the following adapter code\n\t * to register {@code @ControllerAdvice} beans here:\n\t * <pre>\n\t * ControllerAdviceBean.findAnnotatedBeans(context).forEach(bean -&gt;\n\t *         messageHandler.registerMessagingAdvice(new ControllerAdviceWrapper(bean));\n\t *\n\t * public class ControllerAdviceWrapper implements MessagingAdviceBean {\n\t *     private final ControllerAdviceBean delegate;\n\t *     // delegate all methods\n\t * }\n\t * </pre>\n\t * @param bean the bean to check for {@code @MessageExceptionHandler} methods\n\t * @since 5.3.5\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "bean"
    ],
    "position": {
      "column": 1,
      "line": 214
    },
    "return": "void",
    "signature": "public void registerMessagingAdvice(MessagingAdviceBean bean)",
    "source_code": "\tpublic void registerMessagingAdvice(MessagingAdviceBean bean) {\n\t\tClass<?> type = bean.getBeanType();\n\t\tif (type != null) {\n\t\t\tAnnotationExceptionHandlerMethodResolver resolver = new AnnotationExceptionHandlerMethodResolver(type);\n\t\t\tif (resolver.hasExceptionMappings()) {\n\t\t\t\tregisterExceptionHandlerAdvice(bean, resolver);\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"Detected @MessageExceptionHandler methods in \" + bean);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}"
  },
  "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistryBenchmark": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 39
    },
    "signature": "public class DefaultSubscriptionRegistryBenchmark",
    "source_code": "public class DefaultSubscriptionRegistryBenchmark {\n\n\t@State(Scope.Benchmark)\n\tpublic static class ServerState {\n\t\t@Param(\"1000\")\n\t\tpublic int sessions;\n\n\t\t@Param(\"10\")\n\t\tpublic int destinations;\n\n\t\t@Param({\"0\", \"1024\"})\n\t\tint cacheSizeLimit;\n\n\t\t@Param({\"none\", \"patternSubscriptions\", \"selectorHeaders\"})\n\t\tString specialization;\n\n\t\tpublic DefaultSubscriptionRegistry registry;\n\n\t\tpublic String[] destinationIds;\n\n\t\tpublic String[] sessionIds;\n\n\t\tpublic AtomicInteger uniqueIdGenerator;\n\n\t\tpublic Message<?> findMessage;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void doSetup() {\n\t\t\tthis.findMessage = MessageBuilder.createMessage(\"\",  SimpMessageHeaderAccessor.create().getMessageHeaders());\n\t\t\tthis.uniqueIdGenerator = new AtomicInteger();\n\n\t\t\tthis.registry = new DefaultSubscriptionRegistry();\n\t\t\tthis.registry.setCacheLimit(this.cacheSizeLimit);\n\t\t\tthis.registry.setSelectorHeaderName(\"selectorHeaders\".equals(this.specialization) ? \"someSelector\" : null);\n\n\t\t\tthis.destinationIds = IntStream.range(0, this.destinations)\n\t\t\t\t\t.mapToObj(i -> \"/some/destination/\" + i)\n\t\t\t\t\t.toArray(String[]::new);\n\n\t\t\tthis.sessionIds = IntStream.range(0, this.sessions)\n\t\t\t\t\t.mapToObj(i -> \"sessionId_\" + i)\n\t\t\t\t\t.toArray(String[]::new);\n\n\t\t\tfor (String sessionId : this.sessionIds) {\n\t\t\t\tfor (String destinationId : this.destinationIds) {\n\t\t\t\t\tregisterSubscriptions(sessionId, destinationId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic void registerSubscriptions(String sessionId, String destination) {\n\t\t\tif (\"patternSubscriptions\".equals(this.specialization)) {\n\t\t\t\tdestination = \"/**/\" + destination;\n\t\t\t}\n\t\t\tString subscriptionId = \"subscription_\" + this.uniqueIdGenerator.incrementAndGet();\n\t\t\tthis.registry.registerSubscription(subscribeMessage(sessionId, subscriptionId, destination));\n\t\t}\n\t}\n\n\t@State(Scope.Thread)\n\tpublic static class Requests {\n\t\t@Param({\"none\", \"sameDestination\", \"sameSession\"})\n\t\tString contention;\n\n\t\tpublic String session;\n\n\t\tpublic Message<?> subscribe;\n\n\t\tpublic String findDestination;\n\n\t\tpublic Message<?> unsubscribe;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void doSetup(ServerState serverState) {\n\t\t\tint uniqueNumber = serverState.uniqueIdGenerator.incrementAndGet();\n\n\t\t\tif (\"sameDestination\".equals(this.contention)) {\n\t\t\t\tthis.findDestination = serverState.destinationIds[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.findDestination = serverState.destinationIds[uniqueNumber % serverState.destinationIds.length];\n\t\t\t}\n\n\t\t\tif (\"sameSession\".equals(this.contention)) {\n\t\t\t\tthis.session = serverState.sessionIds[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.session = serverState.sessionIds[uniqueNumber % serverState.sessionIds.length];\n\t\t\t}\n\n\t\t\tString subscription = String.valueOf(uniqueNumber);\n\t\t\tString subscribeDestination = \"patternSubscriptions\".equals(serverState.specialization) ?\n\t\t\t\t\t\"/**/\" + this.findDestination : this.findDestination;\n\t\t\tthis.subscribe = subscribeMessage(this.session, subscription, subscribeDestination);\n\n\t\t\tthis.unsubscribe = unsubscribeMessage(this.session, subscription);\n\t\t}\n\t}\n\n\t@State(Scope.Thread)\n\tpublic static class FindRequest {\n\t\t@Param({\"none\", \"noSubscribers\", \"sameDestination\"})\n\t\tString contention;\n\n\t\tpublic String destination;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void doSetup(ServerState serverState) {\n\t\t\tswitch (this.contention) {\n\t\t\t\tcase \"noSubscribers\":\n\t\t\t\t\tthis.destination = \"someDestination_withNoSubscribers_\" + serverState.uniqueIdGenerator.incrementAndGet();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sameDestination\":\n\t\t\t\t\tthis.destination = serverState.destinationIds[0];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"none\":\n\t\t\t\t\tint uniqueNumber = serverState.uniqueIdGenerator.getAndIncrement();\n\t\t\t\t\tthis.destination = serverState.destinationIds[uniqueNumber % serverState.destinationIds.length];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new IllegalStateException();\n\t\t\t}\n\t\t}\n\t}\n\n\t@Benchmark\n\tpublic void registerUnregister(ServerState serverState, Requests request, Blackhole blackhole) {\n\t\tserverState.registry.registerSubscription(request.subscribe);\n\t\tblackhole.consume(serverState.registry.findSubscriptionsInternal(request.findDestination, serverState.findMessage));\n\t\tserverState.registry.unregisterSubscription(request.unsubscribe);\n\t\tblackhole.consume(serverState.registry.findSubscriptionsInternal(request.findDestination, serverState.findMessage));\n\t}\n\n\t@Benchmark\n\tpublic MultiValueMap<String, String> find(ServerState serverState, FindRequest request) {\n\t\treturn serverState.registry.findSubscriptionsInternal(request.destination, serverState.findMessage);\n\t}\n\n\tpublic static Message<?> subscribeMessage(String sessionId, String subscriptionId, String dest) {\n\t\tSimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(SimpMessageType.SUBSCRIBE);\n\t\taccessor.setSessionId(sessionId);\n\t\taccessor.setSubscriptionId(subscriptionId);\n\t\taccessor.setDestination(dest);\n\t\taccessor.setNativeHeader(\"someSelector\", \"true\");\n\t\treturn MessageBuilder.createMessage(\"\", accessor.getMessageHeaders());\n\t}\n\n\tpublic static Message<?> unsubscribeMessage(String sessionId, String subscriptionId) {\n\t\tSimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(SimpMessageType.UNSUBSCRIBE);\n\t\taccessor.setSessionId(sessionId);\n\t\taccessor.setSubscriptionId(subscriptionId);\n\t\treturn MessageBuilder.createMessage(\"\", accessor.getMessageHeaders());\n\t}\n}"
  },
  "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistryBenchmark#doSetup()": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 66
    },
    "return": "void",
    "signature": "public void doSetup()",
    "source_code": "\t\tpublic void doSetup() {\n\t\t\tthis.findMessage = MessageBuilder.createMessage(\"\",  SimpMessageHeaderAccessor.create().getMessageHeaders());\n\t\t\tthis.uniqueIdGenerator = new AtomicInteger();\n\n\t\t\tthis.registry = new DefaultSubscriptionRegistry();\n\t\t\tthis.registry.setCacheLimit(this.cacheSizeLimit);\n\t\t\tthis.registry.setSelectorHeaderName(\"selectorHeaders\".equals(this.specialization) ? \"someSelector\" : null);\n\n\t\t\tthis.destinationIds = IntStream.range(0, this.destinations)\n\t\t\t\t\t.mapToObj(i -> \"/some/destination/\" + i)\n\t\t\t\t\t.toArray(String[]::new);\n\n\t\t\tthis.sessionIds = IntStream.range(0, this.sessions)\n\t\t\t\t\t.mapToObj(i -> \"sessionId_\" + i)\n\t\t\t\t\t.toArray(String[]::new);\n\n\t\t\tfor (String sessionId : this.sessionIds) {\n\t\t\t\tfor (String destinationId : this.destinationIds) {\n\t\t\t\t\tregisterSubscriptions(sessionId, destinationId);\n\t\t\t\t}\n\t\t\t}\n\t\t}"
  },
  "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistryBenchmark#doSetup(serverState)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "serverState"
    ],
    "position": {
      "column": 1,
      "line": 146
    },
    "return": "void",
    "signature": "public void doSetup(ServerState serverState)",
    "source_code": "\t\tpublic void doSetup(ServerState serverState) {\n\t\t\tswitch (this.contention) {\n\t\t\t\tcase \"noSubscribers\":\n\t\t\t\t\tthis.destination = \"someDestination_withNoSubscribers_\" + serverState.uniqueIdGenerator.incrementAndGet();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sameDestination\":\n\t\t\t\t\tthis.destination = serverState.destinationIds[0];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"none\":\n\t\t\t\t\tint uniqueNumber = serverState.uniqueIdGenerator.getAndIncrement();\n\t\t\t\t\tthis.destination = serverState.destinationIds[uniqueNumber % serverState.destinationIds.length];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new IllegalStateException();\n\t\t\t}\n\t\t}"
  },
  "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistryBenchmark#find(serverState,request)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "serverState",
      "request"
    ],
    "position": {
      "column": 1,
      "line": 173
    },
    "return": "String>",
    "signature": "public String> find(ServerState serverState, FindRequest request)",
    "source_code": "\tpublic MultiValueMap<String, String> find(ServerState serverState, FindRequest request) {\n\t\treturn serverState.registry.findSubscriptionsInternal(request.destination, serverState.findMessage);\n\t}"
  },
  "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistryBenchmark#registerSubscriptions(sessionId,destination)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "sessionId",
      "destination"
    ],
    "position": {
      "column": 1,
      "line": 89
    },
    "return": "void",
    "signature": "public void registerSubscriptions(String sessionId, String destination)",
    "source_code": "\t\tpublic void registerSubscriptions(String sessionId, String destination) {\n\t\t\tif (\"patternSubscriptions\".equals(this.specialization)) {\n\t\t\t\tdestination = \"/**/\" + destination;\n\t\t\t}\n\t\t\tString subscriptionId = \"subscription_\" + this.uniqueIdGenerator.incrementAndGet();\n\t\t\tthis.registry.registerSubscription(subscribeMessage(sessionId, subscriptionId, destination));\n\t\t}"
  },
  "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistryBenchmark#registerUnregister(serverState,request,blackhole)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "serverState",
      "request",
      "blackhole"
    ],
    "position": {
      "column": 1,
      "line": 165
    },
    "return": "void",
    "signature": "public void registerUnregister(ServerState serverState, Requests request, Blackhole blackhole)",
    "source_code": "\tpublic void registerUnregister(ServerState serverState, Requests request, Blackhole blackhole) {\n\t\tserverState.registry.registerSubscription(request.subscribe);\n\t\tblackhole.consume(serverState.registry.findSubscriptionsInternal(request.findDestination, serverState.findMessage));\n\t\tserverState.registry.unregisterSubscription(request.unsubscribe);\n\t\tblackhole.consume(serverState.registry.findSubscriptionsInternal(request.findDestination, serverState.findMessage));\n\t}"
  },
  "org.springframework.messaging.simp.broker.FindRequest": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 139
    },
    "signature": "public class FindRequest",
    "source_code": "\tpublic static class FindRequest {\n\t\t@Param({\"none\", \"noSubscribers\", \"sameDestination\"})\n\t\tString contention;\n\n\t\tpublic String destination;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void doSetup(ServerState serverState) {\n\t\t\tswitch (this.contention) {\n\t\t\t\tcase \"noSubscribers\":\n\t\t\t\t\tthis.destination = \"someDestination_withNoSubscribers_\" + serverState.uniqueIdGenerator.incrementAndGet();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sameDestination\":\n\t\t\t\t\tthis.destination = serverState.destinationIds[0];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"none\":\n\t\t\t\t\tint uniqueNumber = serverState.uniqueIdGenerator.getAndIncrement();\n\t\t\t\t\tthis.destination = serverState.destinationIds[uniqueNumber % serverState.destinationIds.length];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new IllegalStateException();\n\t\t\t}\n\t\t}\n\t}"
  },
  "org.springframework.messaging.simp.broker.Requests": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 99
    },
    "signature": "public class Requests",
    "source_code": "\tpublic static class Requests {\n\t\t@Param({\"none\", \"sameDestination\", \"sameSession\"})\n\t\tString contention;\n\n\t\tpublic String session;\n\n\t\tpublic Message<?> subscribe;\n\n\t\tpublic String findDestination;\n\n\t\tpublic Message<?> unsubscribe;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void doSetup(ServerState serverState) {\n\t\t\tint uniqueNumber = serverState.uniqueIdGenerator.incrementAndGet();\n\n\t\t\tif (\"sameDestination\".equals(this.contention)) {\n\t\t\t\tthis.findDestination = serverState.destinationIds[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.findDestination = serverState.destinationIds[uniqueNumber % serverState.destinationIds.length];\n\t\t\t}\n\n\t\t\tif (\"sameSession\".equals(this.contention)) {\n\t\t\t\tthis.session = serverState.sessionIds[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.session = serverState.sessionIds[uniqueNumber % serverState.sessionIds.length];\n\t\t\t}\n\n\t\t\tString subscription = String.valueOf(uniqueNumber);\n\t\t\tString subscribeDestination = \"patternSubscriptions\".equals(serverState.specialization) ?\n\t\t\t\t\t\"/**/\" + this.findDestination : this.findDestination;\n\t\t\tthis.subscribe = subscribeMessage(this.session, subscription, subscribeDestination);\n\n\t\t\tthis.unsubscribe = unsubscribeMessage(this.session, subscription);\n\t\t}\n\t}"
  },
  "org.springframework.messaging.simp.broker.ServerState": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 42
    },
    "signature": "public class ServerState",
    "source_code": "\tpublic static class ServerState {\n\t\t@Param(\"1000\")\n\t\tpublic int sessions;\n\n\t\t@Param(\"10\")\n\t\tpublic int destinations;\n\n\t\t@Param({\"0\", \"1024\"})\n\t\tint cacheSizeLimit;\n\n\t\t@Param({\"none\", \"patternSubscriptions\", \"selectorHeaders\"})\n\t\tString specialization;\n\n\t\tpublic DefaultSubscriptionRegistry registry;\n\n\t\tpublic String[] destinationIds;\n\n\t\tpublic String[] sessionIds;\n\n\t\tpublic AtomicInteger uniqueIdGenerator;\n\n\t\tpublic Message<?> findMessage;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void doSetup() {\n\t\t\tthis.findMessage = MessageBuilder.createMessage(\"\",  SimpMessageHeaderAccessor.create().getMessageHeaders());\n\t\t\tthis.uniqueIdGenerator = new AtomicInteger();\n\n\t\t\tthis.registry = new DefaultSubscriptionRegistry();\n\t\t\tthis.registry.setCacheLimit(this.cacheSizeLimit);\n\t\t\tthis.registry.setSelectorHeaderName(\"selectorHeaders\".equals(this.specialization) ? \"someSelector\" : null);\n\n\t\t\tthis.destinationIds = IntStream.range(0, this.destinations)\n\t\t\t\t\t.mapToObj(i -> \"/some/destination/\" + i)\n\t\t\t\t\t.toArray(String[]::new);\n\n\t\t\tthis.sessionIds = IntStream.range(0, this.sessions)\n\t\t\t\t\t.mapToObj(i -> \"sessionId_\" + i)\n\t\t\t\t\t.toArray(String[]::new);\n\n\t\t\tfor (String sessionId : this.sessionIds) {\n\t\t\t\tfor (String destinationId : this.destinationIds) {\n\t\t\t\t\tregisterSubscriptions(sessionId, destinationId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic void registerSubscriptions(String sessionId, String destination) {\n\t\t\tif (\"patternSubscriptions\".equals(this.specialization)) {\n\t\t\t\tdestination = \"/**/\" + destination;\n\t\t\t}\n\t\t\tString subscriptionId = \"subscription_\" + this.uniqueIdGenerator.incrementAndGet();\n\t\t\tthis.registry.registerSubscription(subscribeMessage(sessionId, subscriptionId, destination));\n\t\t}\n\t}"
  },
  "org.springframework.messaging.simp.broker.destination": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "field",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 143
    },
    "signature": "public String destination",
    "source_code": "\t\tpublic String destination;",
    "type": "String"
  },
  "org.springframework.messaging.simp.broker.destinationIds": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "field",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 57
    },
    "signature": "public String[] destinationIds",
    "source_code": "\t\tpublic String[] destinationIds;",
    "type": "String[]"
  },
  "org.springframework.messaging.simp.broker.destinations": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "field",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 47
    },
    "signature": "public int destinations",
    "source_code": "\t\tpublic int destinations;",
    "type": "int"
  },
  "org.springframework.messaging.simp.broker.findDestination": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "field",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 107
    },
    "signature": "public String findDestination",
    "source_code": "\t\tpublic String findDestination;",
    "type": "String"
  },
  "org.springframework.messaging.simp.broker.registry": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "field",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 55
    },
    "signature": "public DefaultSubscriptionRegistry registry",
    "source_code": "\t\tpublic DefaultSubscriptionRegistry registry;",
    "type": "DefaultSubscriptionRegistry"
  },
  "org.springframework.messaging.simp.broker.session": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "field",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 103
    },
    "signature": "public String session",
    "source_code": "\t\tpublic String session;",
    "type": "String"
  },
  "org.springframework.messaging.simp.broker.sessionIds": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "field",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 59
    },
    "signature": "public String[] sessionIds",
    "source_code": "\t\tpublic String[] sessionIds;",
    "type": "String[]"
  },
  "org.springframework.messaging.simp.broker.sessions": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "field",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 44
    },
    "signature": "public int sessions",
    "source_code": "\t\tpublic int sessions;",
    "type": "int"
  },
  "org.springframework.messaging.simp.broker.uniqueIdGenerator": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "field",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 61
    },
    "signature": "public AtomicInteger uniqueIdGenerator",
    "source_code": "\t\tpublic AtomicInteger uniqueIdGenerator;",
    "type": "AtomicInteger"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor": {
    "change": "removed",
    "deprecated": false,
    "doc": "/**\n * Wraps a {@link HandlerInterceptor} and uses URL patterns to determine whether\n * it applies to a given request.\n *\n * <p>Pattern matching can be done with {@link PathMatcher} or with parsed\n * {@link PathPattern}. The syntax is largely the same with the latter being more\n * tailored for web usage and more efficient. The choice is driven by the\n * presence of a {@link UrlPathHelper#resolveAndCacheLookupPath resolved}\n * {@code String} lookupPath or a {@link ServletRequestPathUtils#parseAndCache\n * parsed} {@code RequestPath} which in turn depends on the\n * {@link HandlerMapping} that matched the current request.\n *\n * <p>{@code MappedInterceptor} is supported by sub-classes of\n * {@link org.springframework.web.servlet.handler.AbstractHandlerMethodMapping\n * AbstractHandlerMethodMapping} which detect beans of type\n * {@code MappedInterceptor} and also check if interceptors directly registered\n * with it are of this type.\n *\n * @author Keith Donald\n * @author Rossen Stoyanchev\n * @author Brian Clozel\n * @since 3.0\n */",
    "kind": "class",
    "modifiers": [
      "public"
    ],
    "position": {
      "column": 1,
      "line": 62
    },
    "signature": "public class MappedInterceptor",
    "source_code": "public final class MappedInterceptor implements HandlerInterceptor {\n\n\tprivate static PathMatcher defaultPathMatcher = new AntPathMatcher();\n\n\n\t@Nullable\n\tprivate final PatternAdapter[] includePatterns;\n\n\t@Nullable\n\tprivate final PatternAdapter[] excludePatterns;\n\n\tprivate PathMatcher pathMatcher = defaultPathMatcher;\n\n\tprivate final HandlerInterceptor interceptor;\n\n\n\t/**\n\t * Create an instance with the given include and exclude patterns along with\n\t * the target interceptor for the mappings.\n\t * @param includePatterns patterns to which requests must match, or null to\n\t * match all paths\n\t * @param excludePatterns patterns to which requests must not match\n\t * @param interceptor the target interceptor\n\t * @param parser a parser to use to pre-parse patterns into {@link PathPattern};\n\t * when not provided, {@link PathPatternParser#defaultInstance} is used.\n\t * @since 5.3\n\t */\n\tpublic MappedInterceptor(@Nullable String[] includePatterns, @Nullable String[] excludePatterns,\n\t\t\tHandlerInterceptor interceptor, @Nullable PathPatternParser parser) {\n\n\t\tthis.includePatterns = PatternAdapter.initPatterns(includePatterns, parser);\n\t\tthis.excludePatterns = PatternAdapter.initPatterns(excludePatterns, parser);\n\t\tthis.interceptor = interceptor;\n\t}\n\n\n\t/**\n\t * Variant of\n\t * {@link #MappedInterceptor(String[], String[], HandlerInterceptor, PathPatternParser)}\n\t * with include patterns only.\n\t */\n\tpublic MappedInterceptor(@Nullable String[] includePatterns, HandlerInterceptor interceptor) {\n\t\tthis(includePatterns, null, interceptor);\n\t}\n\n\t/**\n\t * Variant of\n\t * {@link #MappedInterceptor(String[], String[], HandlerInterceptor, PathPatternParser)}\n\t * without a provided parser.\n\t */\n\tpublic MappedInterceptor(@Nullable String[] includePatterns, @Nullable String[] excludePatterns,\n\t\t\tHandlerInterceptor interceptor) {\n\n\t\tthis(includePatterns, excludePatterns, interceptor, null);\n\t}\n\n\t/**\n\t * Variant of\n\t * {@link #MappedInterceptor(String[], String[], HandlerInterceptor, PathPatternParser)}\n\t * with a {@link WebRequestInterceptor} as the target.\n\t */\n\tpublic MappedInterceptor(@Nullable String[] includePatterns, WebRequestInterceptor interceptor) {\n\t\tthis(includePatterns, null, interceptor);\n\t}\n\n\t/**\n\t * Variant of\n\t * {@link #MappedInterceptor(String[], String[], HandlerInterceptor, PathPatternParser)}\n\t * with a {@link WebRequestInterceptor} as the target.\n\t */\n\tpublic MappedInterceptor(@Nullable String[] includePatterns, @Nullable String[] excludePatterns,\n\t\t\tWebRequestInterceptor interceptor) {\n\n\t\tthis(includePatterns, excludePatterns, new WebRequestHandlerInterceptorAdapter(interceptor));\n\t}\n\n\n\t/**\n\t * Return the patterns this interceptor is mapped to.\n\t */\n\t@Nullable\n\tpublic String[] getPathPatterns() {\n\t\treturn (!ObjectUtils.isEmpty(this.includePatterns) ?\n\t\t\t\tArrays.stream(this.includePatterns).map(PatternAdapter::getPatternString).toArray(String[]::new) :\n\t\t\t\tnull);\n\t}\n\n\t/**\n\t * The target {@link HandlerInterceptor} to invoke in case of a match.\n\t */\n\tpublic HandlerInterceptor getInterceptor() {\n\t\treturn this.interceptor;\n\t}\n\n\t/**\n\t * Configure the PathMatcher to use to match URL paths with against include\n\t * and exclude patterns.\n\t * <p>This is an advanced property that should be used only when a\n\t * customized {@link AntPathMatcher} or a custom PathMatcher is required.\n\t * <p>By default this is {@link AntPathMatcher}.\n\t * <p><strong>Note:</strong> Setting {@code PathMatcher} enforces use of\n\t * String pattern matching even when a\n\t * {@link ServletRequestPathUtils#parseAndCache parsed} {@code RequestPath}\n\t * is available.\n\t */\n\tpublic void setPathMatcher(PathMatcher pathMatcher) {\n\t\tthis.pathMatcher = pathMatcher;\n\t}\n\n\t/**\n\t * The {@link #setPathMatcher(PathMatcher) configured} PathMatcher.\n\t */\n\tpublic PathMatcher getPathMatcher() {\n\t\treturn this.pathMatcher;\n\t}\n\n\n\t/**\n\t * Check whether this interceptor is mapped to the request.\n\t * <p>The request mapping path is expected to have been resolved externally.\n\t * See also class-level Javadoc.\n\t * @param request the request to match to\n\t * @return {@code true} if the interceptor should be applied to the request\n\t */\n\tpublic boolean matches(HttpServletRequest request) {\n\t\tObject path = ServletRequestPathUtils.getCachedPath(request);\n\t\tif (this.pathMatcher != defaultPathMatcher) {\n\t\t\tpath = path.toString();\n\t\t}\n\t\tboolean isPathContainer = (path instanceof PathContainer);\n\t\tif (!ObjectUtils.isEmpty(this.excludePatterns)) {\n\t\t\tfor (PatternAdapter adapter : this.excludePatterns) {\n\t\t\t\tif (adapter.match(path, isPathContainer, this.pathMatcher)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ObjectUtils.isEmpty(this.includePatterns)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (PatternAdapter adapter : this.includePatterns) {\n\t\t\tif (adapter.match(path, isPathContainer, this.pathMatcher)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Determine a match for the given lookup path.\n\t * @param lookupPath the current request path\n\t * @param pathMatcher a path matcher for path pattern matching\n\t * @return {@code true} if the interceptor applies to the given request path\n\t * @deprecated as of 5.3 in favor of {@link #matches(HttpServletRequest)}\n\t */\n\t@Deprecated\n\tpublic boolean matches(String lookupPath, PathMatcher pathMatcher) {\n\t\tpathMatcher = (this.pathMatcher != defaultPathMatcher ? this.pathMatcher : pathMatcher);\n\t\tif (!ObjectUtils.isEmpty(this.excludePatterns)) {\n\t\t\tfor (PatternAdapter adapter : this.excludePatterns) {\n\t\t\t\tif (pathMatcher.match(adapter.getPatternString(), lookupPath)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ObjectUtils.isEmpty(this.includePatterns)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (PatternAdapter adapter : this.includePatterns) {\n\t\t\tif (pathMatcher.match(adapter.getPatternString(), lookupPath)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\t// HandlerInterceptor delegation\n\n\t@Override\n\tpublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n\t\t\tthrows Exception {\n\n\t\treturn this.interceptor.preHandle(request, response, handler);\n\t}\n\n\t@Override\n\tpublic void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n\t\t\t@Nullable ModelAndView modelAndView) throws Exception {\n\n\t\tthis.interceptor.postHandle(request, response, handler, modelAndView);\n\t}\n\n\t@Override\n\tpublic void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n\t\t\t@Nullable Exception ex) throws Exception {\n\n\t\tthis.interceptor.afterCompletion(request, response, handler, ex);\n\t}\n\n\n\t/**\n\t * Contains both the parsed {@link PathPattern} and the raw String pattern,\n\t * and uses the former when the cached path is {@link PathContainer} or the\n\t * latter otherwise. If the pattern cannot be parsed due to unsupported\n\t * syntax, then {@link PathMatcher} is used for all requests.\n\t * @since 5.3.6\n\t */\n\tprivate static class PatternAdapter {\n\n\t\tprivate final String patternString;\n\n\t\t@Nullable\n\t\tprivate final PathPattern pathPattern;\n\n\n\t\tpublic PatternAdapter(String pattern, @Nullable PathPatternParser parser) {\n\t\t\tthis.patternString = pattern;\n\t\t\tthis.pathPattern = initPathPattern(pattern, parser);\n\t\t}\n\n\t\t@Nullable\n\t\tprivate static PathPattern initPathPattern(String pattern, @Nullable PathPatternParser parser) {\n\t\t\ttry {\n\t\t\t\treturn (parser != null ? parser : PathPatternParser.defaultInstance).parse(pattern);\n\t\t\t}\n\t\t\tcatch (PatternParseException ex) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tpublic String getPatternString() {\n\t\t\treturn this.patternString;\n\t\t}\n\n\t\tpublic boolean match(Object path, boolean isPathContainer, PathMatcher pathMatcher) {\n\t\t\tif (isPathContainer) {\n\t\t\t\tPathContainer pathContainer = (PathContainer) path;\n\t\t\t\tif (this.pathPattern != null) {\n\t\t\t\t\treturn this.pathPattern.matches(pathContainer);\n\t\t\t\t}\n\t\t\t\tString lookupPath = pathContainer.value();\n\t\t\t\tpath = UrlPathHelper.defaultInstance.removeSemicolonContent(lookupPath);\n\t\t\t}\n\t\t\treturn pathMatcher.match(this.patternString, (String) path);\n\t\t}\n\n\t\t@Nullable\n\t\tpublic static PatternAdapter[] initPatterns(\n\t\t\t\t@Nullable String[] patterns, @Nullable PathPatternParser parser) {\n\n\t\t\tif (ObjectUtils.isEmpty(patterns)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn Arrays.stream(patterns)\n\t\t\t\t\t.map(pattern -> new PatternAdapter(pattern, parser))\n\t\t\t\t\t.toArray(PatternAdapter[]::new);\n\t\t}\n\t}\n\n}"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#afterCompletion(request,response,handler,ex)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "request",
      "response",
      "handler",
      "ex"
    ],
    "position": {
      "column": 1,
      "line": 256
    },
    "return": "void",
    "signature": "public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n\t\t\t@Nullable Exception ex)",
    "source_code": "\tpublic void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#getInterceptor()": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * The target {@link HandlerInterceptor} to invoke in case of a match.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 152
    },
    "return": "HandlerInterceptor",
    "signature": "public HandlerInterceptor getInterceptor()",
    "source_code": "\tpublic HandlerInterceptor getInterceptor() {\n\t\treturn this.interceptor;\n\t}"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#getPathMatcher()": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * The {@link #setPathMatcher(PathMatcher) configured} PathMatcher.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 174
    },
    "return": "PathMatcher",
    "signature": "public PathMatcher getPathMatcher()",
    "source_code": "\tpublic PathMatcher getPathMatcher() {\n\t\treturn this.pathMatcher;\n\t}"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#getPathPatterns()": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * Return the patterns this interceptor is mapped to.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 143
    },
    "return": "String[]",
    "signature": "public String[] getPathPatterns()",
    "source_code": "\tpublic String[] getPathPatterns() {\n\t\treturn (!ObjectUtils.isEmpty(this.includePatterns) ?\n\t\t\t\tArrays.stream(this.includePatterns).map(PatternAdapter::getPatternString).toArray(String[]::new) :\n\t\t\t\tnull);\n\t}"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#getPatternString()": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 293
    },
    "return": "String",
    "signature": "public String getPatternString()",
    "source_code": "\t\tpublic String getPatternString() {\n\t\t\treturn this.patternString;\n\t\t}"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#initPatterns(patterns,parser)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "patterns",
      "parser"
    ],
    "position": {
      "column": 1,
      "line": 310
    },
    "return": "PatternAdapter[]",
    "signature": "public PatternAdapter[] initPatterns(@Nullable String[] patterns, @Nullable PathPatternParser parser)",
    "source_code": "\t\tpublic static PatternAdapter[] initPatterns("
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#match(path,isPathContainer,pathMatcher)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "path",
      "isPathContainer",
      "pathMatcher"
    ],
    "position": {
      "column": 1,
      "line": 297
    },
    "return": "boolean",
    "signature": "public boolean match(Object path, boolean isPathContainer, PathMatcher pathMatcher)",
    "source_code": "\t\tpublic boolean match(Object path, boolean isPathContainer, PathMatcher pathMatcher) {\n\t\t\tif (isPathContainer) {\n\t\t\t\tPathContainer pathContainer = (PathContainer) path;\n\t\t\t\tif (this.pathPattern != null) {\n\t\t\t\t\treturn this.pathPattern.matches(pathContainer);\n\t\t\t\t}\n\t\t\t\tString lookupPath = pathContainer.value();\n\t\t\t\tpath = UrlPathHelper.defaultInstance.removeSemicolonContent(lookupPath);\n\t\t\t}\n\t\t\treturn pathMatcher.match(this.patternString, (String) path);\n\t\t}"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#matches(lookupPath,pathMatcher)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * Determine a match for the given lookup path.\n\t * @param lookupPath the current request path\n\t * @param pathMatcher a path matcher for path pattern matching\n\t * @return {@code true} if the interceptor applies to the given request path\n\t * @deprecated as of 5.3 in favor of {@link #matches(HttpServletRequest)}\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "lookupPath",
      "pathMatcher"
    ],
    "position": {
      "column": 1,
      "line": 218
    },
    "return": "boolean",
    "signature": "public boolean matches(String lookupPath, PathMatcher pathMatcher)",
    "source_code": "\tpublic boolean matches(String lookupPath, PathMatcher pathMatcher) {\n\t\tpathMatcher = (this.pathMatcher != defaultPathMatcher ? this.pathMatcher : pathMatcher);\n\t\tif (!ObjectUtils.isEmpty(this.excludePatterns)) {\n\t\t\tfor (PatternAdapter adapter : this.excludePatterns) {\n\t\t\t\tif (pathMatcher.match(adapter.getPatternString(), lookupPath)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ObjectUtils.isEmpty(this.includePatterns)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (PatternAdapter adapter : this.includePatterns) {\n\t\t\tif (pathMatcher.match(adapter.getPatternString(), lookupPath)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#matches(request)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * Check whether this interceptor is mapped to the request.\n\t * <p>The request mapping path is expected to have been resolved externally.\n\t * See also class-level Javadoc.\n\t * @param request the request to match to\n\t * @return {@code true} if the interceptor should be applied to the request\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "request"
    ],
    "position": {
      "column": 1,
      "line": 186
    },
    "return": "boolean",
    "signature": "public boolean matches(HttpServletRequest request)",
    "source_code": "\tpublic boolean matches(HttpServletRequest request) {\n\t\tObject path = ServletRequestPathUtils.getCachedPath(request);\n\t\tif (this.pathMatcher != defaultPathMatcher) {\n\t\t\tpath = path.toString();\n\t\t}\n\t\tboolean isPathContainer = (path instanceof PathContainer);\n\t\tif (!ObjectUtils.isEmpty(this.excludePatterns)) {\n\t\t\tfor (PatternAdapter adapter : this.excludePatterns) {\n\t\t\t\tif (adapter.match(path, isPathContainer, this.pathMatcher)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ObjectUtils.isEmpty(this.includePatterns)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (PatternAdapter adapter : this.includePatterns) {\n\t\t\tif (adapter.match(path, isPathContainer, this.pathMatcher)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#postHandle(request,response,handler,modelAndView)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "request",
      "response",
      "handler",
      "modelAndView"
    ],
    "position": {
      "column": 1,
      "line": 249
    },
    "return": "void",
    "signature": "public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n\t\t\t@Nullable ModelAndView modelAndView)",
    "source_code": "\tpublic void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#preHandle(request,response,handler)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "request",
      "response",
      "handler"
    ],
    "position": {
      "column": 1,
      "line": 242
    },
    "return": "boolean",
    "signature": "public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)",
    "source_code": "\tpublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)"
  },
  "org.springframework.web.servlet.handler.MappedInterceptor#setPathMatcher(pathMatcher)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * Configure the PathMatcher to use to match URL paths with against include\n\t * and exclude patterns.\n\t * <p>This is an advanced property that should be used only when a\n\t * customized {@link AntPathMatcher} or a custom PathMatcher is required.\n\t * <p>By default this is {@link AntPathMatcher}.\n\t * <p><strong>Note:</strong> Setting {@code PathMatcher} enforces use of\n\t * String pattern matching even when a\n\t * {@link ServletRequestPathUtils#parseAndCache parsed} {@code RequestPath}\n\t * is available.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "pathMatcher"
    ],
    "position": {
      "column": 1,
      "line": 167
    },
    "return": "void",
    "signature": "public void setPathMatcher(PathMatcher pathMatcher)",
    "source_code": "\tpublic void setPathMatcher(PathMatcher pathMatcher) {\n\t\tthis.pathMatcher = pathMatcher;\n\t}"
  }
}