{
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#getDestination(message)": {
    "change": "removed",
    "deprecated": false,
    "doc": null,
    "kind": "method",
    "modifiers": [
      "protected"
    ],
    "params": [
      "message"
    ],
    "position": {
      "column": 1,
      "line": 307
    },
    "return": "String",
    "signature": "protected String getDestination(Message<?> message)",
    "source_code": "\tprotected String getDestination(Message<?> message) {\n\t\treturn (String) message.getHeaders().get(DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER);\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#getPathMatcher()": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * Return the PathMatcher implementation to use for matching destinations.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 202
    },
    "return": "PathMatcher",
    "signature": "public PathMatcher getPathMatcher()",
    "source_code": "\tpublic PathMatcher getPathMatcher() {\n\t\treturn this.pathMatcher;\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#getRouteMatcher()": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Return the {@code RouteMatcher} used to map messages to handlers.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [],
    "position": {
      "column": 1,
      "line": 207
    },
    "return": "RouteMatcher",
    "signature": "public RouteMatcher getRouteMatcher()",
    "source_code": "\tpublic RouteMatcher getRouteMatcher() {\n\t\treturn this.routeMatcher;\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#setPathMatcher(pathMatcher)": {
    "change": "removed",
    "deprecated": false,
    "doc": "\t/**\n\t * Set the PathMatcher implementation to use for matching destinations\n\t * against configured destination patterns.\n\t * <p>By default, {@link AntPathMatcher} is used with separator set to \".\".\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "pathMatcher"
    ],
    "position": {
      "column": 1,
      "line": 194
    },
    "return": "void",
    "signature": "public void setPathMatcher(PathMatcher pathMatcher)",
    "source_code": "\tpublic void setPathMatcher(PathMatcher pathMatcher) {\n\t\tAssert.notNull(pathMatcher, \"PathMatcher must not be null\");\n\t\tthis.pathMatcher = pathMatcher;\n\t}"
  },
  "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler#setRouteMatcher(routeMatcher)": {
    "change": "added",
    "deprecated": false,
    "doc": "\t/**\n\t * Set the {@code RouteMatcher} to use for mapping messages to handlers\n\t * based on the route patterns they're configured with.\n\t * <p>By default, {@link SimpleRouteMatcher} is used, backed by\n\t * {@link AntPathMatcher} with \".\" as separator. For greater\n\t * efficiency consider using the {@code PathPatternRouteMatcher} from\n\t * {@code spring-web} instead.\n\t */",
    "kind": "method",
    "modifiers": [
      "public"
    ],
    "params": [
      "routeMatcher"
    ],
    "position": {
      "column": 1,
      "line": 199
    },
    "return": "void",
    "signature": "public void setRouteMatcher(RouteMatcher routeMatcher)",
    "source_code": "\tpublic void setRouteMatcher(RouteMatcher routeMatcher) {\n\t\tAssert.notNull(routeMatcher, \"RouteMatcher must not be null\");\n\t\tthis.routeMatcher = routeMatcher;\n\t}"
  }
}